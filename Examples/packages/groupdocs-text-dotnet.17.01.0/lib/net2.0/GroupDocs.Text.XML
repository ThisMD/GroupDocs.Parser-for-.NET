<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GroupDocs.Text</name>
  </assembly>
  <members>
    <member name="T:GroupDocs.Text.CompositeNotificationReceiver">
      <summary>
             Provides the functionality to combine notification receivers.
             </summary>
      <example>
        <para>This code shows how to create CompositeNotificationReceiver and send a message:</para>
        <code lang="c#">
             var receiver1 = new MockNotificationReceiver();
             var receiver2 = new MockNotificationReceiver();
             var message = NotificationMessage.CreateInformationMessage("test");
            
             var compositeReceiver = new CompositeNotificationReceiver(receiver1, receiver2);
             compositeReceiver.ProcessMessage(message); // message sends to receiver1 AND receiver2   
             </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.INotificationReceiver">
      <summary>
            Provides the functionality of processing notifications.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.INotificationReceiver.ProcessMessage(GroupDocs.Text.NotificationMessage)">
      <summary>
            Processes the <paramref name="message" />.
            </summary>
      <param name="message">The message to process.</param>
    </member>
    <member name="M:GroupDocs.Text.CompositeNotificationReceiver.#ctor(GroupDocs.Text.INotificationReceiver[])">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.CompositeNotificationReceiver" /> class.
            </summary>
      <param name="receivers">A collection of notification receivers to combine.</param>
    </member>
    <member name="M:GroupDocs.Text.CompositeNotificationReceiver.ProcessMessage(GroupDocs.Text.NotificationMessage)">
      <summary>
            Processes the <paramref name="message" />.
            </summary>
      <param name="message">The message to process.</param>
    </member>
    <member name="T:GroupDocs.Text.Containers.ZipContainer">
      <summary>
            Provides a container for zip archives.
            </summary>
      <example>
        <para>Enumerate all files in the archive:</para>
        <code lang="c#">
            using (var container = new ZipContainer(stream))
            {
              for(int i = 0; i&lt;container.Entities.Count; i++)
              {
                Console.WriteLine("Name: " + container.Entities[i].Name);
                Console.WriteLine("Path: " + container.Entities[i].Path.ToString());
                Console.WriteLine("Media type: " + container.Entities[i].MediaType);
              }
            }   
            </code>
        <para>Read the concrete file:</para>
        <code lang="c#">
            using (var container = new ZipContainer(stream))
            {
              using (TextExtractor extractor = extractorFactory.CreateTextExtractor(container.Entities[index].OpenStream())
              {
                Console.WriteLine(extractor.ExtractAll());
              }
            }
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Containers.Container">
      <summary>
            Provides the base class for containers.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.Container" /> class.
            </summary>
      <param name="containerStream">A stream of the container.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.Container" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Dispose">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Load">
      <summary>
            Loads a collection of the container's entities.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the container.
            </summary>
      <param name="disposing">A boolean true if invoked from Dispose; otherwise, false.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.OpenStream(GroupDocs.Text.Containers.Container.Entity)">
      <summary>
            Returns the stream with the content of the <paramref name="entity" />.
            </summary>
      <param name="entity">The entity.</param>
      <returns>An instance of the <see cref="T:System.IO.Stream" /> with the content of the entity.</returns>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.LoadEntities">
      <summary>
            Returns a collection of the container's entities.
            </summary>
      <returns>A collection of the container's entities.</returns>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.MediaType">
      <summary>
            Gets or sets a media type for the container.
            </summary>
      <value>A media type for the document.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Encoding">
      <summary>
            Gets or sets an encoding for the container.
            </summary>
      <value>An encoding for the container.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Entities">
      <summary>
            Gets a collection of the container's entities.
            </summary>
      <value>A collection of the container's entities.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.ContainerStream">
      <summary>
            Gets a stream of the container.
            </summary>
      <value>A stream of the container.</value>
    </member>
    <member name="T:GroupDocs.Text.Containers.Container.Entity">
      <summary>
            Provides the information of the container's entity.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Entity.#ctor(GroupDocs.Text.Containers.Container,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.Container.Entity" /> class.
            </summary>
      <param name="owner">A reference to the instance of the container.</param>
      <param name="name">The name of the entity.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Entity.#ctor(GroupDocs.Text.Containers.Container,System.String,GroupDocs.Text.Containers.ContainerPath)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.Container.Entity" /> class.
            </summary>
      <param name="owner">A reference to the instance of the container.</param>
      <param name="name">The name of the entity.</param>
      <param name="path">The path of the entity.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Entity.OpenStream">
      <summary>
            Returns the stream with the content of the entity.
            </summary>
      <returns>An instance of the <see cref="T:System.IO.Stream" /> with the content of the entity.</returns>
    </member>
    <member name="M:GroupDocs.Text.Containers.Container.Entity.ToString">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Entity.Name">
      <summary>
            Gets a name of the entity.
            </summary>
      <value>A string that represents the name of the entity.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Entity.Path">
      <summary>
            Gets a path of the entity.
            </summary>
      <value>A string that represents the path of the entity.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Entity.MediaType">
      <summary>
            Gets a media type for the document.
            </summary>
      <value>A media type for the document.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Entity.Keys">
      <summary>
            Gets a collection containing the keys in the <see cref="T:GroupDocs.Text.Containers.Container" />.
            </summary>
      <value>
            A collection containing the keys in the <see cref="T:GroupDocs.Text.Containers.Container" />.
            </value>
    </member>
    <member name="P:GroupDocs.Text.Containers.Container.Entity.Item(System.String)">
      <summary>
            Gets or sets the value associated with the specified key.
            </summary>
      <param name="parameterName">The key of the value to get or set.</param>
      <returns>
            The value associated with the specified key. If the specified key is not found, 
            a get operation returns null. A set operation creates a new element with the specified key.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Containers.ZipContainer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.ZipContainer" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.ZipContainer.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.ZipContainer" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.ZipContainer.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.ZipContainer" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.ZipContainer.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.ZipContainer" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="T:GroupDocs.Detectors.NamespaceDoc">
      <summary>
            The namespace provides the classes to support encoding and media type detecting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.ExtractMode">
      <summary>
            Describes the mode of text extraction.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.ExtractMode.Simple">
      <summary>
            Fast text extraction. The text in this mode is extracted in not very accurate way but faster than in the standard mode. 
            If the fast text extraction doesn't support the document format, then this parameter is ignored 
            and the standard text extraction is used.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.ExtractMode.Standard">
      <summary>
            Standard text extraction.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.ContainsSearchHandler">
      <summary>
            Represents search handler for processing search event only once.
            </summary>
      <remarks>
            This search handler is used to search for at least one occurrence of the search word.
            </remarks>
    </member>
    <member name="T:GroupDocs.Text.Extractors.ISearchHandler">
      <summary>
            Represents search handler for processing search events.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.ISearchHandler.ProcessSearchResult(GroupDocs.Text.Extractors.SearchResult)">
      <summary>
            The next occurrence of the search word is found.
            </summary>
      <param name="searchResult">The search result.</param>
      <returns>A boolean true to continue the search; otherwise false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.ISearchHandler.Complete">
      <summary>
            The search is completed.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.ContainsSearchHandler.Complete">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.ContainsSearchHandler.ProcessSearchResult(GroupDocs.Text.Extractors.SearchResult)">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.ContainsSearchHandler.IsFound">
      <summary>
            Gets a value indicating whether the search word is found.
            </summary>
      <value>A boolean true if the search word is found; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.HighlightDirection">
      <summary>
            Provides the direction of highlight.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.HighlightDirection.Left">
      <summary>
            Extract a text to the left from a position.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.HighlightDirection.Right">
      <summary>
            Extract a text to the right from a position.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.HighlightOptions">
      <summary>
            Provides the options for highlight.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.HighlightOptions.CreateFixedLength(GroupDocs.Text.Extractors.HighlightDirection,System.Int32,System.Int32)">
      <summary>
            Creates highlight options with fixed length. 
            </summary>
      <param name="direction">A direction of highlight.</param>
      <param name="position">A start position of highlight.</param>
      <param name="length">A length of highlight.</param>
      <returns>An instance of <see cref="T:GroupDocs.Text.Extractors.HighlightOptions" />.</returns>
    </member>
    <member name="P:GroupDocs.Text.Extractors.HighlightOptions.Direction">
      <summary>
            Gets a direction of highlight.
            </summary>
      <value>A direction of highlight.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.HighlightOptions.Position">
      <summary>
            Gets a start position of highlight.
            </summary>
      <value>A start position of highlight.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.HighlightOptions.Length">
      <summary>
            Gets a length of highlight.
            </summary>
      <value>A length of highlight.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.NamespaceDoc">
      <summary>
            The namespace provides the classes to support extracting data from documents. 
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.SearchHighlightOptions">
      <summary>
            Provides options of highlight.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.SearchHighlightOptions.Empty">
      <summary>
            Gets an empty instance.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchHighlightOptions.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.SearchHighlightOptions" /> class.
            </summary>
      <param name="length">A length of both highlights.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchHighlightOptions.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.SearchHighlightOptions" /> class.
            </summary>
      <param name="leftLength">A length of the left highlight.</param>
      <param name="rightLength">A length of the right highlight.</param>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchHighlightOptions.LeftLength">
      <summary>
            Gets a length of the left highlight.
            </summary>
      <value>A length of the left highlight.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchHighlightOptions.RightLength">
      <summary>
            Gets a length of the right highlight.
            </summary>
      <value>A length of the right highlight.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.IHighlightExtractor">
      <summary>
            Provides the functionality to extract highlights. 
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.IHighlightExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <summary>
            Extracts highlights.
            </summary>
      <param name="highlightOptions">A collection of <see cref="T:GroupDocs.Text.Extractors.HighlightOptions" />.</param>
      <returns>A collection of strings that represent highlights. If no highlight is found, a collection is empty.</returns>
    </member>
    <member name="T:GroupDocs.Text.Extractors.ISearchable">
      <summary>
            Provides the functionality to search a text.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.ISearchEngine">
      <summary>
            Provides the functionality to search a text.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.ListSearchHandler">
      <summary>
            Represents search handler for converting search events into a plain list.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.ListSearchHandler.Complete">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.ListSearchHandler.ProcessSearchResult(GroupDocs.Text.Extractors.SearchResult)">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.ListSearchHandler.List">
      <summary>
            Gets a list with search results.
            </summary>
      <value>A list with search results.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.SearchOptions">
      <summary>
            Provides the options for search.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.SearchOptions.Empty">
      <summary>
            Gets an empty instance.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchOptions.#ctor(GroupDocs.Text.Extractors.SearchHighlightOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.SearchOptions" /> class.
            </summary>
      <param name="highlightOptions">Options of highlight.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchOptions.#ctor(GroupDocs.Text.Extractors.SearchHighlightOptions,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.SearchOptions" /> class.
            </summary>
      <param name="highlightOptions">Options of highlight.</param>
      <param name="isCaseSensitive">A value indicating whether search is case sensitive.</param>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchOptions.HighlightOptions">
      <summary>
            Gets options of highlight.
            </summary>
      <value>A size of highlight.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchOptions.IsCaseSensitive">
      <summary>
            Gets a value indicating whether search is case sensitive.
            </summary>
      <value>A boolean true if search is case sensitive; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.SearchResult">
      <summary>
            Provides the result of the search. 
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchResult.#ctor(System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.SearchResult" /> class.
            </summary>
      <param name="index">An index of the found text.</param>
      <param name="foundText">A found text.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchResult.#ctor(System.Int32,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.SearchResult" /> class.
            </summary>
      <param name="index">An index of the found text.</param>
      <param name="foundText">A found text.</param>
      <param name="leftText">A text on the left side of the found text.</param>
      <param name="rightText">A text on the right side of the found text.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.SearchResult.AddPosition(System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:GroupDocs.Text.Extractors.SearchResult" /> with a new position.
            </summary>
      <param name="position">An increment to the current position.</param>
      <returns>An instance of <see cref="T:GroupDocs.Text.Extractors.SearchResult" /> with a new position.</returns>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchResult.LeftText">
      <summary>
            Gets a text on the left side of the found text.
            </summary>
      <value>A text on the left side of the found text.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchResult.RightText">
      <summary>
            Gets a text on the right side of the found text.
            </summary>
      <value>A text on the right side of the found text.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchResult.FoundText">
      <summary>
            Gets a found text.
            </summary>
      <value>A found text.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.SearchResult.Index">
      <summary>
            Gets an index of the found text.
            </summary>
      <value>An index of the found text.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase">
      <summary>
            Provides the base class for text extractors for emails.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.TextExtractor">
      <summary>
            Provides the base class for text extractors.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.TextExtractor" /> class.
            </summary>
      <param name="stream">A stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.Dispose">
      <summary>
            Releases the unmanaged resources used by the extractor.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.Reset">
      <summary>
            Resets the current document.
            </summary>
      <remarks>
            Resets the cursor's position. <see cref="M:GroupDocs.Text.Extractors.Text.TextExtractor.ExtractLine" /> method will return the first line of the document.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.ExtractLine">
      <summary>
            Extracts a line of characters from the text extractor and returns the data as a string.
            </summary>
      <returns>The next line from the extractor, or null if all characters have been extracted.</returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.ExtractAll">
      <summary>
            Extracts all characters from the current position to the end of the text extractor
            and returns them as one string.
            </summary>
      <returns>
            A string that contains all characters from the current position to the end of the text extractor.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the extractor.
            </summary>
      <param name="disposing">A boolean true if invoked from Dispose; otherwise, false.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.CheckDisposed">
      <summary>
            Checks whether the extractor is disposed.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The extractor is disposed.</exception>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.ExtractText">
      <summary>
            Extracts all characters from the current position to the end of the text extractor
            and returns them as one string.
            </summary>
      <returns>
            A string that contains all characters from the current position to the end of the text extractor.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.ExtractTextLine">
      <summary>
            Extracts a line of characters from the text extractor and returns the data as a string.
            </summary>
      <returns>The next line from the extractor, or null if all characters have been extracted.</returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.TextExtractor.PrepareLine">
      <summary>
            Returns a line of the text.
            </summary>
      <returns>A string that represents a line of the text, or null if all characters have been read.</returns>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.TextExtractor.IsDisposed">
      <summary>
            Gets a value indicating whether the extractor is disposed.
            </summary>
      <value>A boolean true if reader is disposed; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.TextExtractor.MediaType">
      <summary>
            Gets or sets a media type for the document.
            </summary>
      <value>A media type for the document, or null if media type is not specified.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.TextExtractor.Encoding">
      <summary>
            Gets or sets an encoding for the document.
            </summary>
      <value>A encoding for the document, or null if encoding is not specified.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.TextExtractor.Password">
      <summary>
            Gets a password of the document.
            </summary>
      <value>A string that represents a password of the document.</value>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase.GetContentType(System.Int32)">
      <summary>
            Returns a <see cref="T:System.Net.Mime.ContentType" /> of the attachment.
            </summary>
      <param name="attachment">An index of the attachment.</param>
      <returns>A <see cref="T:System.Net.Mime.ContentType" /> of the attachment.</returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase.GetStream(System.Int32)">
      <summary>
            Returns a <see cref="T:System.IO.Stream" /> with a content of the attachment.
            </summary>
      <param name="attachment">An index of the attachment.</param>
      <returns>A <see cref="T:System.IO.Stream" /> with a content of the attachment.</returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase.Reset">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase.PrepareLine">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.EmailTextExtractorBase.AttachmentCount">
      <summary>
            Gets a total count of the attachments.
            </summary>
      <value>A total count of the attachments.</value>
    </member>
    <member name="T:GroupDocs.Text.InvalidPasswordException">
      <summary>
            Thrown if a document is encrypted with a password and the password specified
            when opening the document is incorrect or missing.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.GroupDocsTextException">
      <summary>
            Represents the errors that occur during application execution.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.GroupDocsTextException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.GroupDocsTextException" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.GroupDocsTextException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.GroupDocsTextException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:GroupDocs.Text.InvalidPasswordException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.InvalidPasswordException" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.InvalidPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.InvalidPasswordException" /> class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:GroupDocs.Text.NotificationLevel">
      <summary>
            Provides information about a level of the notification.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.NotificationLevel.Error">
      <summary>
            Error notification.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.NotificationLevel.Warning">
      <summary>
            Warning notification.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.NotificationLevel.Information">
      <summary>
            Information notification.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.NotificationMessage">
      <summary>
            Provides a notification message.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.NotificationMessage.CreateErrorMessage(System.String)">
      <summary>
            Creates a error notification message.
            </summary>
      <param name="description">The description of the error.</param>
      <returns>An instance of the <see cref="T:GroupDocs.Text.NotificationMessage" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.NotificationMessage.CreateErrorMessage(System.String,System.Exception)">
      <summary>
            Creates a error notification message.
            </summary>
      <param name="description">The description of the error.</param>
      <param name="exception">The instance of exception.</param>
      <returns>An instance of the <see cref="T:GroupDocs.Text.NotificationMessage" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.NotificationMessage.CreateWarningMessage(System.String)">
      <summary>
            Creates a warning notification message.
            </summary>
      <param name="description">The description of the warning.</param>
      <returns>An instance of the <see cref="T:GroupDocs.Text.NotificationMessage" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.NotificationMessage.CreateInformationMessage(System.String)">
      <summary>
            Creates a information notification message.
            </summary>
      <param name="description">The description of the information.</param>
      <returns>An instance of the <see cref="T:GroupDocs.Text.NotificationMessage" />.</returns>
    </member>
    <member name="P:GroupDocs.Text.NotificationMessage.NotificationLevel">
      <summary>
            Gets a level of the notification.
            </summary>
      <value>A level of the notification.</value>
    </member>
    <member name="P:GroupDocs.Text.NotificationMessage.Description">
      <summary>
            Gets a description of the notification.
            </summary>
      <value>A string with description of the notification.</value>
    </member>
    <member name="P:GroupDocs.Text.NotificationMessage.Exception">
      <summary>
            Gets an exception of the error notification.
            </summary>
      <value>An instance of the exception or null (if not presented).</value>
    </member>
    <member name="T:GroupDocs.Text.Containers.NamespaceDoc">
      <summary>
            The namespace provides the classes for working with containers.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.Encoding.NamespaceDoc">
      <summary>
            The namespace provides the class that supports encoding detecting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.NamespaceDoc">
      <summary>
            The namespace provides the classes for detecting media type. 
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.NamespaceDoc">
      <summary>
            The namespace provides the classes for extracting metadata.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.CellsSheetInfo">
      <summary>
            Provides the information of a sheet.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsSheetInfo.ExtractSheetHeader">
      <summary>
            Extracts the name of the sheet.
            </summary>
      <returns>
            A string that contains the name of the sheet.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsSheetInfo.ExtractSheet(System.String[])">
      <summary>
            Extracts all characters from the sheet and returns the data as a string.
            </summary>
      <param name="columns">A collection of the columns' names to read.</param>
      <returns>
            A string that contains all characters from the sheet, or null if all characters have been extracted.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsSheetInfo.ExtractRow(System.Int32,System.String[])">
      <summary>
            Extracts all characters from the row with the <paramref name="rowIndex" /> and returns the data as a string.
            </summary>
      <param name="rowIndex">The index of the row.</param>
      <param name="columns">A collection of the columns' names to read.</param>
      <returns>
            A string that contains all characters from the row, or null if all characters have been extracted.
            </returns>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsSheetInfo.ColumnNames">
      <summary>
            Gets a collection of the columns' names.
            </summary>
      <value>A collection of the columns' names.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsSheetInfo.Index">
      <summary>
            Gets a index of the sheet.
            </summary>
      <value>The index of the sheet.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsSheetInfo.Name">
      <summary>
            Gets a name of the sheet.
            </summary>
      <value>A string that represents the name of the sheet.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsSheetInfo.RowCount">
      <summary>
            Gets a total number of the rows.
            </summary>
      <value>A total number of the rows..</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.CellsTextExtractor">
      <summary>
            Provides the text extractor for spreadsheets.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.xls</term>
            <description>Microsoft Excel Spreadsheet</description>
          </item>
          <item>
            <term>.xlsx</term>
            <description>Microsoft Office Open XML Workbook</description>
          </item>
          <item>
            <term>.xlsm</term>
            <description>Microsoft Excel 2007 Macro-Enabled Workbook</description>
          </item>
          <item>
            <term>.xlsb</term>
            <description>Microsoft Excel 2007 Binary Workbook</description>
          </item>
          <item>
            <term>.ods</term>
            <description>OpenDocument spreadsheet</description>
          </item>
          <item>
            <term>.csv</term>
            <description>Comma Separated Values text file</description>
          </item>
        </list>
        <para>
            By default the fast text extraction mode is used. If you have trouble with the accuracy of text extraction,
            turn off it by setting <see cref="P:GroupDocs.Text.Extractors.Text.CellsTextExtractor.IsRawMode" /> property to <c>false</c>.
            </para>
      </remarks>
      <example>
        <para>Extracting a text from a spreadsheet:</para>
        <code lang="c#">
            CellsTextExtractor extractor = new CellsTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting by sheets:</para>
        <code lang="c#">
            CellsTextExtractor extractor = new CellsTextExtractor(stream);
            Console.WriteLine(extractor.ExtractSheet(sheetIndex));
            </code>
        <para>Extracting the information about the sheet:</para>
        <code lang="c#">
            CellsTextExtractor extractor = new CellsTextExtractor(stream);
            CellsSheetInfo sheetInfo = extractor.GetSheetInfo(sheetIndex);
            Console.WriteLine("Name: {0}", sheetInfo.Name);
            Console.WriteLine("Index: {0}", sheetInfo.Index);
            Console.WriteLine("Rows Count: {0}", sheetInfo.RowCount);
            Console.WriteLine("Columns");
            for(int i = 0; i&lt;sheetInfo.Columns.Count; i++)
            {
              Console.WriteLine("{0}{1}", sheetInfo.Columns[i], i + 1 &lt; sheetInfo.Columns.Count? ";" : "");
            }
            </code>
        <para>Extracting by rows:</para>
        <code lang="c#">
            CellsTextExtractor extractor = new CellsTextExtractor(stream);
            CellsSheetInfo sheetInfo = extractor.GetSheetInfo(sheetIndex);
            Console.WriteLine(sheetInfo.ExtractRow(rowIndex));
            </code>
        <para>Extracting only the selected columns:</para>
        <code lang="c#">
            CellsTextExtractor extractor = new CellsTextExtractor(stream);
            CellsSheetInfo sheetInfo = extractor.GetSheetInfo(sheetIndex);
            </code>
        <code lang="c#">
            Console.WriteLine(sheetInfo.ExtractRow(rowIndex, "A1", "C1")); // a row  with only A1 and C1 columns
            Console.WriteLine(sheetInfo.ExtractSheet("A1", "C1")); // an entire sheet with only A1 and C1 columns
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase">
      <summary>
            Provides the base class of text extractors for spreadsheets.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.ExtractSheet(System.Int32)">
      <summary>
            Extracts all characters from the sheet with <paramref name="sheetIndex" /> and returns the data as a string.
            </summary>
      <param name="sheetIndex">The index of the sheet.</param>
      <returns>
            A string that contains all characters from the sheet, or null if all characters have been extracted.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.GetSheetInfo(System.Int32)">
      <summary>
            Returns an information of the sheet.
            </summary>
      <param name="sheetIndex">The index of the sheet.</param>
      <returns>
            An instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsSheetInfo" /> class.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.Reset">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.ExtractTextLine">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.ExtractText">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.PrepareLine">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsTextExtractorBase.SheetCount">
      <summary>
            Gets or sets a total count of the sheets.
            </summary>
      <value>A total count of the sheets.</value>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractor.ExtractSheet(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsTextExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsTextExtractor.IsRawMode">
      <summary>
            Gets or sets a value indicating whether the reader extracts a text without any formatting.
            </summary>
      <remarks>
            This mode is designed for the fast text extraction. The text in this mode is extracted in not very accurate
            way but faster than in the standard mode. If the fast text extraction doesn't support the document format,
            then this parameter is ignored and the standard text extraction is used.
            </remarks>
      <value>A value is false if the reader extracts a text without any formatting; otherwise, true.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsTextExtractor.ExtractMode">
      <summary>
            Gets or sets a value indicating the mode of text extraction.
            </summary>
      <value>The mode of text extraction.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.NamespaceDoc">
      <summary>
            The namespace provides the classes for extracting a text. 
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase">
      <summary>
            Provides the base class for text extractors for presentations.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase" /> class.
            </summary>
      <param name="stream">A stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase.ExtractSlide(System.Int32)">
      <summary>
            Extracts all characters from the slide with <paramref name="slideIndex" /> and returns the data as a string.
            </summary>
      <param name="slideIndex">The index of the slide.</param>
      <returns>
            A string that contains all characters from the slide, or null if all characters have been extracted.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase.Reset">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase.PrepareLine">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.SlidesTextExtractorBase.SlideCount">
      <summary>
            Gets a total count of the slides.
            </summary>
      <value>A total count of the slides.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Html.NamespaceDoc">
      <summary>
            The namespace provides the classes of HTML text formatter.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Markdown.NamespaceDoc">
      <summary>
            The namespace provides the classes of Markdown text formatter.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.NamespaceDoc">
      <summary>
            The namespace provides the classes for working with formatting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.NamespaceDoc">
      <summary>
            The namespace provides the classes of a plain text formatter.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.LoadOptions">
      <summary>
            Represents the options of loading the file.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.LoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.LoadOptions" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.LoadOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.LoadOptions" /> class.
            </summary>
      <param name="mediaType">A media type of the file.</param>
    </member>
    <member name="M:GroupDocs.Text.LoadOptions.#ctor(System.String,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.LoadOptions" /> class.
            </summary>
      <param name="mediaType">A media type of the file.</param>
      <param name="encoding">An encoding of the file.</param>
    </member>
    <member name="M:GroupDocs.Text.LoadOptions.#ctor(System.String,System.Text.Encoding,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.LoadOptions" /> class.
            </summary>
      <param name="mediaType">A media type of the file.</param>
      <param name="encoding">An encoding of the file.</param>
      <param name="password">A password of the file.</param>
    </member>
    <member name="M:GroupDocs.Text.LoadOptions.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="P:GroupDocs.Text.LoadOptions.MediaType">
      <summary>
            Gets or sets a media type for the file.
            </summary>
      <value>A string with a media type for the file or null, if media type is not set.</value>
    </member>
    <member name="P:GroupDocs.Text.LoadOptions.Encoding">
      <summary>
            Gets or sets an encoding for the file.
            </summary>
      <value>An encoding for the file.</value>
    </member>
    <member name="P:GroupDocs.Text.LoadOptions.Password">
      <summary>
            Gets or sets a password for the file.
            </summary>
      <value>An string with the password for the file.</value>
    </member>
    <member name="P:GroupDocs.Text.LoadOptions.NotificationReceiver">
      <summary>
            Gets or sets a NotificationReceiver.
            </summary>
      <value>The object which implemented <see cref="T:GroupDocs.Text.INotificationReceiver" /> interface.</value>
    </member>
    <member name="T:GroupDocs.Text.NamespaceDoc">
      <summary>
            The namespace provides the classes for text extraction.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.CompositeMediaTypeDetector">
      <summary>
            Provides the functionality to detect various media types.
            </summary>
      <example>
        <para>For detecting media type of any document type CompositeMediaTypeDetector is used:</para>
        <code lang="c#">
            var detector = CompositeMediaTypeDetector.Default;
            var mediaType = detector.Detect(stream);
            </code>
        <para>Default property contains all supported media type detectors.</para>
        <code lang="c#">
            var detector = new CompositeMediaTypeDetector(
              new MediaTypeDetector[]
              {
                new CellsMediaTypeDetector(),
                new WordsMediaTypeDetector(),
                new SlidesMediaTypeDetector(),
              }
            );
            </code>
        <para>It detects only media type of spreadsheets, presentations and text documents.</para>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector">
      <summary>
            Provides the base class for media type detectors.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector.Detect(System.IO.Stream)">
      <summary>
            Detects the media type by the content of the <paramref name="stream" />.
            </summary>
      <param name="stream">Stream of the document.</param>
      <returns>A string with the media type if the media type is detected; otherwise, null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector.Detect(System.String)">
      <summary>
            Detects the media type by the <paramref name="fileName" />.
            </summary>
      <param name="fileName">The name of the file.</param>
      <returns>A string with the media type if the media type is detected; otherwise, null.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> is null or empty string.</exception>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector.Supports(System.String)">
      <summary>
            Detects whether the <paramref name="mediaType" /> is supported by the detector.
            </summary>
      <param name="mediaType">A string with the media type.</param>
      <returns>A boolean true if the media type is supported; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector.DetectByContent(System.IO.Stream)">
      <summary>
            Detects the media type by the content of the <paramref name="stream" />.
            </summary>
      <param name="stream">Stream of the document.</param>
      <returns>A string with the media type if the media type is detected; otherwise, null.</returns>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector.DetectByExt(System.String)">
      <summary>
            Detects the media type by the <paramref name="ext" />.
            </summary>
      <param name="ext">The extension of the file in the UPPER case.</param>
      <returns>A string with the media type if the media type is detected; otherwise, null.</returns>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector.CheckMediaType(System.String)">
      <summary>
            Detects whether the <paramref name="mediaType" /> is supported by the detector.
            </summary>
      <param name="mediaType">A string with media type in the UPPER case.</param>
      <returns>A boolean true if the media type is supported; otherwise, false.</returns>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.CompositeMediaTypeDetector.Default">
      <summary>
            A default media type detector.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.CsvMediaTypeDetector">
      <summary>
            Provides the functionality to detect CSV's media type.
            </summary>
      <example>
        <para>Detecting the media type of CSV file:</para>
        <code lang="c#">
            var detector = new CsvMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.CsvMediaTypeDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.CsvMediaTypeDetector" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.EmailMediaTypeDetector">
      <summary>
            Provides the functionality to the detect media type of a email message.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.msg</term>
            <description>Microsoft Outlook message</description>
          </item>
          <item>
            <term>.eml</term>
            <description>Email Message</description>
          </item>
          <item>
            <term>.emlx</term>
            <description>Apple's macOS Mail message</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Detecting the media type of a email message:</para>
        <code lang="c#">
            var detector = new EmailMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.EmailMediaTypeDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.EmailMediaTypeDetector" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.PdfMediaTypeDetector">
      <summary>
            Provides the functionality to detect the media type of PDF document.
            </summary>
      <example>
        <para>Detecting the media type of PDF document:</para>
        <code lang="c#">
            var detector = new PdfMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.PersonalStorageMediaTypeDetector">
      <summary>
            Provides the functionality to detect the media type of Outlook's Personal Storage.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.pst</term>
            <description>Outlook's Personal Storage</description>
          </item>
          <item>
            <term>.ost</term>
            <description>Off-line Storage Table</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Detecting the media type of Outlook's Personal Storage:</para>
        <code lang="c#">
            var detector = new PersonalStorageMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.PersonalStorageMediaTypeDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.PersonalStorageMediaTypeDetector" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.SlidesMediaTypeDetector">
      <summary>
            Provides the functionality to detect the media type of a presentation.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.ppt</term>
            <description>Microsoft PowerPoint Presentation</description>
          </item>
          <item>
            <term>.pptx</term>
            <description>Microsoft Office Open XML Presentation</description>
          </item>
          <item>
            <term>.pps</term>
            <description>Microsoft PowerPoint Slideshow</description>
          </item>
          <item>
            <term>.ppsx</term>
            <description>Microsoft Office Open XML Auto-Play Presentation</description>
          </item>
          <item>
            <term>.odp</term>
            <description>OpenDocument presentation</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Detecting the media type of a presentation:</para>
        <code lang="c#">
            var detector = new SlidesMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.SlidesMediaTypeDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.SlidesMediaTypeDetector" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.CellsMediaTypeDetector">
      <summary>
            Provides the functionality to detect the media type of a spreadsheet.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.xls</term>
            <description>Microsoft Excel Spreadsheet</description>
          </item>
          <item>
            <term>.xlsx</term>
            <description>Microsoft Office Open XML Workbook</description>
          </item>
          <item>
            <term>.xlsb</term>
            <description>Microsoft Excel 2007 Binary Workbook</description>
          </item>
          <item>
            <term>.ods</term>
            <description>OpenDocument spreadsheet</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Detecting the media type of a spreadsheet:</para>
        <code lang="c#">
            var detector = new CellsMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.CellsMediaTypeDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.CellsMediaTypeDetector" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.WordsMediaTypeDetector">
      <summary>
            Provides the functionality to detect the media type a text document.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.doc</term>
            <description>Microsoft Word Text document</description>
          </item>
          <item>
            <term>.docx</term>
            <description>Microsoft Office Open XML Text document</description>
          </item>
          <item>
            <term>.docm</term>
            <description>Microsoft Word 2007 Master document</description>
          </item>
          <item>
            <term>.rtf</term>
            <description>Rich Text Format text file</description>
          </item>
          <item>
            <term>.odt</term>
            <description>OpenDocument text</description>
          </item>
          <item>
            <term>.txt</term>
            <description>Plain text</description>
          </item>
          <item>
            <term>.html (.xhtml, .htm)</term>
            <description>Hypertext Markup Language document</description>
          </item>
          <item>
            <term>.mhtml (.mht)</term>
            <description>Web Archive Single File</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Detecting the media type of a text document:</para>
        <code lang="c#">
            var detector = new WordsMediaTypeDetector();
            var mediaType = detector.Detect(stream);
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.MediaType.WordsMediaTypeDetector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.WordsMediaTypeDetector" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.Encoding.EncodingDetector">
      <summary>
            Provides the functionality for detecting the encoding of the <see cref="T:System.IO.Stream" />.
            </summary>
      <example>
        <para>The constructor accepts a default encoding for non-unicode encodings:</para>
        <code lang="c#">
            EncodingDetector detector = new EncodingDetector(Encoding.GetEncoding(1251));
            </code>
        <para>Detect the encoding only by BOM:</para>
        <code lang="c#">
            var ed = new EncodingDetector(Encoding.GetEncoding(1251));
            Encoding encoding = ed.Detect(stream);
            </code>
        <para>Detect the encoding only by BOM or by the content (if BOM is not presented):</para>
        <code lang="c#">
            var ed = new EncodingDetector(Encoding.GetEncoding(1251));
            Encoding encoding = ed.Detect(stream, true);
            </code>
        <para>If BOM is presented, it works like the previous method. But if BOM is not presented,
            it tries to detect encoding by the content. It uses indirect methods of the detecting, 
            therefore, it is slower and less accurate.</para>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Detectors.Encoding.EncodingDetector.#ctor(System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Detectors.Encoding.EncodingDetector" /> class.
            </summary>
      <param name="defaultAnsiEncoding">The character encoding that is used for ANSI encodings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="defaultAnsiEncoding" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Detectors.Encoding.EncodingDetector.Detect(System.IO.Stream)">
      <summary>
            Detects the character encoding of the <paramref name="stream" /> by byte order mark (BOM).
            </summary>
      <param name="stream">The stream for which the character encoding must be detected.</param>
      <returns>
            The character encoding of the <paramref name="stream" /> or null if encoding cannot be detected.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Detectors.Encoding.EncodingDetector.Detect(System.IO.Stream,System.Boolean)">
      <summary>
            Detects the character encoding of the <paramref name="stream" />.
            </summary>
      <param name="stream">The stream for which the character encoding must be detected.</param>
      <param name="detectByContent">
            Indicates whether to detect encoding only by byte order mark (BOM).
            </param>
      <returns>
            The character encoding of the <paramref name="stream" /> or null if encoding cannot be detected.
            </returns>
      <remarks>
            The method tries to detect encoding by byte order mark (BOM). If BOM isn't present or its signature
            is not recognized, the method tries (if <paramref name="detectByContent" /> is set true) to detect
            encoding by content. Detecting by content may not always detect the encoding accurately.
            </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> is empty.</exception>
    </member>
    <member name="P:GroupDocs.Text.Detectors.Encoding.EncodingDetector.DefaultAnsiEncoding">
      <summary>
            Gets the character encoding that is used for ANSI encodings.
            </summary>
      <value>The character encoding that is used for ANSI encodings.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.DocumentPartFormatter`1">
      <summary>
            Provides the functionality for formatting a part of a document.
            </summary>
      <typeparam name="T">The type of a document's part.</typeparam>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentPartFormatter`1.Reset">
      <summary>
            Resets the previous formatted item.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentPartFormatter`1.GetText(`0,GroupDocs.Text.Formatters.DocumentPartOptions)">
      <summary>
            Converts <paramref name="item" /> to the string with formatting.
            </summary>
      <param name="item">The item for formatting.</param>
      <param name="documentPartOptions">The options for formatting.</param>
      <returns>A string that represents formatted <paramref name="item" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentPartFormatter`1.GetText(`0)">
      <summary>
            Converts <paramref name="item" /> to the string with formatting.
            </summary>
      <param name="item">The item for formatting.</param>
      <returns>A string that represents formatted <paramref name="item" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentPartFormatter`1.FormatText(`0,GroupDocs.Text.Formatters.DocumentPartOptions)">
      <summary>
            Converts <paramref name="item" /> to the string with formatting.
            </summary>
      <param name="item">The item for formatting.</param>
      <param name="documentPartOptions">The options for formatting.</param>
      <returns>A string that represents formatted <paramref name="item" />.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartFormatter`1.IsEmpty">
      <summary>
            Gets a value indicating whether the formatter is empty.
            </summary>
      <value>A boolean true if the formatter is empty; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartFormatter`1.PreviousItem">
      <summary>
            Gets the previous formatted item.
            </summary>
      <value>The previous formatted item.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartFormatter`1.PreviousDocumentPartOptions">
      <summary>
            Gets the previous formatted options.
            </summary>
      <value>The previous formatted options.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartFormatter`1.IsFirstItem">
      <summary>
            Gets a value indicating whether formatter has the previous formatted item.
            </summary>
      <value>A boolean if formatter has the previous formatted item; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.DocumentFormatter">
      <summary>
            Provides the base class for documents' formatters.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentFormatter.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" /> class.
            </summary>
      <param name="isNestedTablesSupported">
            A boolean true is formatted supports a nested tables; otherwise, false.
            </param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentFormatter.CreateTextFormatter">
      <summary>
            Creates a formatter for text.
            </summary>
      <returns>An instance of the formatter for the text.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentFormatter.CreateListFormatter">
      <summary>
            Creates a formatter for list.
            </summary>
      <returns>An instance of the formatter for the list.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentFormatter.CreateTableFormatter">
      <summary>
            Creates a formatter for table.
            </summary>
      <returns>An instance of the formatter for the table.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentFormatter.IsNestedTablesSupported">
      <summary>
            Gets a value indicating whether formatted supports a nested tables; otherwise, false.
            </summary>
      <value>A boolean true is formatted supports a nested tables; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.DocumentPartOptions">
      <summary>
            Provides the options for the document's part.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.DocumentPartOptions.Empty">
      <summary>
            An instance with empty options.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.DocumentPartOptions.Inline">
      <summary>
            An instance with options for inline element.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.DocumentPartOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentPartOptions" /> class.
            </summary>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartOptions.MaxWidth">
      <summary>
            Gets a maximum string length.
            </summary>
      <value>Value of the maximum text's length; null if text doesn't have maximum length.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartOptions.TabSize">
      <summary>
            Gets a tab size.
            </summary>
      <value>A count of the space characters for replace the tab symbol.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartOptions.Style">
      <summary>
            Gets a style of the document's part.
            </summary>
      <value>A style of the document's part.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.DocumentPartOptions.IsInline">
      <summary>
            Gets a value indicating whether the element is inline.
            </summary>
      <value>A boolean true if element is inline; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Html.HtmlDocumentFormatter">
      <summary>
            Provides HTML text formatter.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Html.HtmlDocumentFormatter.CreateListFormatter">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Html.HtmlDocumentFormatter.CreateTableFormatter">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Html.HtmlDocumentFormatter.CreateTextFormatter">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Html.HtmlListFormatter">
      <summary>
            Provides the functionality to format the list as HTML formatting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.ListFormatter">
      <summary>
            Provides the functionality to format the list.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListFormatter.GetText(System.String,GroupDocs.Text.Formatters.DocumentPartOptions)">
      <summary>
            Formats the <paramref name="text" />.
            </summary>
      <param name="text">The text to formatting.</param>
      <param name="documentPartOptions">The options for the text formatting.</param>
      <returns>A string that represents formatted <paramref name="text" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListFormatter.GetText(System.String)">
      <summary>
            Formats the <paramref name="text" />.
            </summary>
      <param name="text">The text to formatting.</param>
      <returns>A string that represents formatted <paramref name="text" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListFormatter.CloseList">
      <summary>
            Closes the current list.
            </summary>
      <returns>A string that represents a end of the list.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListFormatter.GetItemMaxWidth(GroupDocs.Text.Formatters.ListItemOptions,GroupDocs.Text.Formatters.DocumentPartOptions)">
      <summary>
            Returns a maximum width of the <pararef name="listItemOptions" />.
            </summary>
      <param name="listItemOptions">The options of the list item.</param>
      <param name="documentPartOptions">The options for the text formatting.</param>
      <returns>A maximum width of the <pararef name="listItemOptions" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Html.HtmlListFormatter.CloseList">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Html.HtmlTableFormatter">
      <summary>
            Provides the functionality to format the table as HTML formatting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableFormatter">
      <summary>
            Provides the functionality to format the table.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableFormatter.CloseTable">
      <summary>
            Closes the current table.
            </summary>
      <returns>A string that represents a end of the table.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableFormatter.ColumnWidthCollection">
      <summary>
            Gets a collection of the columns' widths.
            </summary>
      <value>A collection of the columns' widths.</value>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Html.HtmlTableFormatter.CloseTable">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Html.HtmlTextFormatter">
      <summary>
            Provides the functionality to format the text as HTML formatting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TextFormatter">
      <summary>
            Provides the functionality for formatting a text.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextFormatter.GetText(System.String,GroupDocs.Text.Formatters.DocumentPartOptions)">
      <summary>
            Formats the <paramref name="text" />.
            </summary>
      <param name="text">The text to formatting.</param>
      <param name="documentPartOptions">The options for the text formatting.</param>
      <returns>A string that represents formatted <paramref name="text" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextFormatter.GetText(System.String[])">
      <summary>
            Formats the <paramref name="texts" />.
            </summary>
      <param name="texts">A collection of the text to formatting.</param>
      <returns>A string that represents formatted <paramref name="texts" />.</returns>
    </member>
    <member name="T:GroupDocs.Text.Formatters.ListItem">
      <summary>
            Provides a list item.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItem.#ctor(System.String,GroupDocs.Text.Formatters.ListItemOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.ListItem" /> class.
            </summary>
      <param name="text">A text of the item.</param>
      <param name="options">An options of the item.</param>
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItem.Text">
      <summary>
            Gets a text of the item.
            </summary>
      <value>A text of the item.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItem.Options">
      <summary>
            Gets an options of the item.
            </summary>
      <value>An options of the item.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.ListItemOptions">
      <summary>
            Provides the options for a list item.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.ListItemOptions.Empty">
      <summary>
            Gets an empty instance.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.#ctor(GroupDocs.Text.Formatters.ListItemStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.ListItemOptions" /> class.
            </summary>
      <param name="style">A style of the item.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.#ctor(GroupDocs.Text.Formatters.ListItemStyle,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.ListItemOptions" /> class.
            </summary>
      <param name="style">A style of the item.</param>
      <param name="depth">A depth of the item.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.#ctor(GroupDocs.Text.Formatters.ListItemStyle,System.Int32,System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.ListItemOptions" /> class.
            </summary>
      <param name="style">A style of the item.</param>
      <param name="depth">A depth of the item.</param>
      <param name="bullet">A char that represents a bullet.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.#ctor(GroupDocs.Text.Formatters.ListItemStyle,System.Int32,System.Char,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.ListItemOptions" /> class.
            </summary>
      <param name="style">A style of the item.</param>
      <param name="depth">A depth of the item.</param>
      <param name="bullet">A char that represents a bullet.</param>
      <param name="prefix">A prefix of the item.</param>
      <param name="postfix">A postfix of the item.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.op_Equality(GroupDocs.Text.Formatters.ListItemOptions,GroupDocs.Text.Formatters.ListItemOptions)">
      <summary>
            Checks if the values of two operands are equal or not, if yes then condition becomes true.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>A boolean true if values are equal; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.op_Inequality(GroupDocs.Text.Formatters.ListItemOptions,GroupDocs.Text.Formatters.ListItemOptions)">
      <summary>
            Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>A boolean true if values are not equal; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.Equals(GroupDocs.Text.Formatters.ListItemOptions)">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.ListItemOptions.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItemOptions.Style">
      <summary>
            Gets a style of the item.
            </summary>
      <value>A style of the item.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItemOptions.Depth">
      <summary>
            Gets a depth of the item.
            </summary>
      <value>A depth of the item.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItemOptions.Prefix">
      <summary>
            Gets a prefix of the item.
            </summary>
      <value>A string with the prefix.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItemOptions.Postfix">
      <summary>
            Gets a postfix of the item.
            </summary>
      <value>A string with the postfix.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.ListItemOptions.Bullet">
      <summary>
            Gets a bullet char.
            </summary>
      <value>A char that represents a bullet.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.ListItemStyle">
      <summary>
            Provides a style of a list item.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.ListItemStyle.Bullets">
      <summary>
            A list with bullets.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.ListItemStyle.Numbers">
      <summary>
            A list with numbers.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.ListItemStyle.Letters">
      <summary>
            A list with english letters.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.ListItemStyle.LocalLetters">
      <summary>
            A list with localized letters.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Markdown.MarkdownDocumentFormatter">
      <summary>
            Provides Markdown text formatter.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Markdown.MarkdownDocumentFormatter.CreateListFormatter">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Markdown.MarkdownDocumentFormatter.CreateTableFormatter">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Markdown.MarkdownDocumentFormatter.CreateTextFormatter">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Markdown.MarkdownListFormatter">
      <summary>
            Provides the functionality to format the list as Markdown formatting.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Markdown.MarkdownListFormatter.CloseList">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Markdown.MarkdownTableFormatter">
      <summary>
            Provides the functionality to format the table as Markdown formatting.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Markdown.MarkdownTableFormatter.CloseTable">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Markdown.MarkdownTextFormatter">
      <summary>
            Provides the functionality to format the text as Markdown formatting.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Markdown.MarkdownTextFormatter.#ctor">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Markdown.MarkdownTextFormatter" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter">
      <summary>
            Provides a plain text formatter.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter.#ctor">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter.#ctor(GroupDocs.Text.Formatters.Plain.PlainTableFrame)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> class.
            </summary>
      <param name="frame">An instance of the 
            <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrame" />.
            </param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter.CreateTextFormatter">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter.CreateListFormatter">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter.CreateTableFormatter">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainListFormatter">
      <summary>
            Provides the functionality to format the list as a plain text formatting.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainListFormatter.Reset">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainListFormatter.CloseList">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainListFormatter.GetItemMaxWidth(GroupDocs.Text.Formatters.ListItemOptions,GroupDocs.Text.Formatters.DocumentPartOptions)">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTableFormatter">
      <summary>
            Provides the functionality to format the table as a plain text formatting.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFormatter.#ctor">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFormatter" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFormatter.#ctor(GroupDocs.Text.Formatters.Plain.PlainTableFrame)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFormatter" /> class.
            </summary>
      <param name="frame">An instance of the 
            <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrame" />.
            </param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFormatter.CloseTable">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTableFrame">
      <summary>
            Provides a frame of the table's borders.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrame.#ctor">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrame" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrame.#ctor(GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle,GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge,GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection,GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrame" /> class.
            </summary>
      <param name="angles">The angles of the frame.</param>
      <param name="edges">The edges of the frame.</param>
      <param name="intersections">The intersections of the frame.</param>
      <param name="config">The config of the frame.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrame.AreCellEquals(GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell)">
      <summary>
            Compares two cells.
            </summary>
      <param name="left">The left cell.</param>
      <param name="right">The right cell.</param>
      <returns>A boolean true if the cells are equal; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrame.GetVertical(GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell)">
      <summary>
            Returns a vertical edge.
            </summary>
      <param name="left">The left cell.</param>
      <param name="right">The right cell.</param>
      <returns>A symbol of the vertical edge.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrame.GetHorizontal(GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell,System.Int32)">
      <summary>
            Returns a horizontal edge.
            </summary>
      <param name="top">The top cell.</param>
      <param name="bottom">The bottom cell.</param>
      <param name="columnWidth">The width of the column.</param>
      <returns>A symbol of the horizontal edge.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrame.GetCross(GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell)">
      <summary>
            Returns a symbol of the cross.
            </summary>
      <param name="topLeft">The top-left cell.</param>
      <param name="topRight">The top-right cell.</param>
      <param name="bottomLeft">The bottom-left cell.</param>
      <param name="bottomRight">The bottom-right cell.</param>
      <returns>A symbol of the cross.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrame.Angles">
      <summary>
            Gets an angles of the frame.
            </summary>
      <value>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle" /> class.
            </value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrame.Edges">
      <summary>
            Gets an edges of the frame.
            </summary>
      <value>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge" /> class.
            </value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrame.Intersections">
      <summary>
            Gets a intersections of the frame.
            </summary>
      <value>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection" /> class.
            </value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrame.Config">
      <summary>
            Gets a config of the frame.
            </summary>
      <value>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig" /> class.
            </value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle">
      <summary>
            Provides the information of symbols of intersections.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.Simple">
      <summary>
            Frame angels for Simple style.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.ASCII">
      <summary>
            Frame angels for ASCII style.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.#ctor(System.Char,System.Char,System.Char,System.Char)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle" /> class.
            </summary>
      <param name="topLeft">Symbol of a top-left angle.</param>
      <param name="topRight">Symbol of a top-right angle.</param>
      <param name="bottomLeft">Symbol of a bottom-left angle.</param>
      <param name="bottomRight">Symbol of a bottom-right angle.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.CheckAngle(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Returns a symbol of the angle.
            </summary>
      <param name="left">Indicates whether the intersection has left line.</param>
      <param name="top">Indicates whether the intersection has top line.</param>
      <param name="right">Indicates whether the intersection has right line.</param>
      <param name="bottom">Indicates whether the intersection has bottom line.</param>
      <returns>A symbol of the angle.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.TopLeft">
      <summary>
            Gets a top-left angle.
            </summary>
      <value>Symbol of a top-left angle.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.TopRight">
      <summary>
            Gets a top-right angle.
            </summary>
      <value>Symbol of a top-right angle.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.BottomLeft">
      <summary>
            Gets a bottom-left angle.
            </summary>
      <value>Symbol of a bottom-left angle.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameAngle.BottomRight">
      <summary>
            Gets a bottom-right angle.
            </summary>
      <value>Symbol of a bottom-right angle.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig">
      <summary>
            Provides a configuration of the table's frame.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig.Simple">
      <summary>
            Default configuration.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig" /> class.
            </summary>
      <param name="horizontalLines">A value indicating whether the horizontal lines are enabled.</param>
      <param name="verticalLines">A value indicating whether the vertical lines are enabled.</param>
      <param name="crossPoints">A value indicating whether the cross points are enabled.</param>
      <param name="cellBorders">A value indicating whether the cells' borders are enabled.</param>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig.IsHorizontalLinesEnabled">
      <summary>
            Gets a value indicating whether the horizontal lines are enabled.
            </summary>
      <value>A boolean true if the horizontal lines are enabled; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig.IsVerticalLinesEnabled">
      <summary>
            Gets a value indicating whether the vertical lines are enabled.
            </summary>
      <value>A boolean true if the vertical lines are enabled; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig.IsCrossPointsEnabled">
      <summary>
            Gets a value indicating whether the cross points are enabled.
            </summary>
      <value>A boolean true if the cross points lines are enabled; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameConfig.IsCellBordersEnabled">
      <summary>
            Gets a value indicating whether the cells' borders are enabled.
            </summary>
      <value>A boolean true if the cells' borders are enabled; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge">
      <summary>
            Provides the information of symbols of edges.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge.Simple">
      <summary>
            Frame edges for Simple style.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge.ASCII">
      <summary>
            Frame edges for ASCII styles.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge.#ctor(System.Char,System.Char)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge" /> class.
            </summary>
      <param name="vertical">Symbol of a vertical edge.</param>
      <param name="horizontal">Symbol of a horizontal edge.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge.CheckEdge(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Returns a symbol of the edge.
            </summary>
      <param name="left">Indicates whether the intersection has left line.</param>
      <param name="top">Indicates whether the intersection has top line.</param>
      <param name="right">Indicates whether the intersection has right line.</param>
      <param name="bottom">Indicates whether the intersection has bottom line.</param>
      <returns>A symbol of the edge.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge.Vertical">
      <summary>
            Gets a vertical edge.
            </summary>
      <value>Symbol of a vertical edge.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameEdge.Horizontal">
      <summary>
            Gets a horizontal edge.
            </summary>
      <value>Symbol of a horizontal edge.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection">
      <summary>
            Provides the information of symbols of intersections.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.Simple">
      <summary>
            Frame intersections for Simple style.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.ASCII">
      <summary>
            Frame intersections for ASCII style.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.#ctor(System.Char,System.Char,System.Char,System.Char,System.Char)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection" /> class.
            </summary>
      <param name="left">Symbol of a left intersection to vertical edge.</param>
      <param name="top">Symbol of a bottom intersection to horizontal edge.</param>
      <param name="right">Symbol of a right intersection to vertical edge.</param>
      <param name="bottom">Symbol of a top intersection to horizontal edge.</param>
      <param name="cross">Symbol of a cross intersection.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.CheckIntersection(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Returns a symbol of the intersection.
            </summary>
      <param name="left">Indicates whether the intersection has left line.</param>
      <param name="top">Indicates whether the intersection has top line.</param>
      <param name="right">Indicates whether the intersection has right line.</param>
      <param name="bottom">Indicates whether the intersection has bottom line.</param>
      <returns>A symbol of the intersection.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.Left">
      <summary>
            Gets a left intersection to vertical edge.
            </summary>
      <value>Symbol of a left intersection to vertical edge.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.Top">
      <summary>
            Gets a bottom intersection to horizontal edge.
            </summary>
      <value>Symbol of a bottom intersection to horizontal edge.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.Right">
      <summary>
            Gets a right intersection to vertical edge.
            </summary>
      <value>Symbol of a right intersection to vertical edge.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.Bottom">
      <summary>
            Gets a top intersection to horizontal edge.
            </summary>
      <value>Symbol of a top intersection to horizontal edge.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.Plain.PlainTableFrameIntersection.Cross">
      <summary>
            Gets a cross intersection.
            </summary>
      <value>Symbol of a cross intersection.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.Plain.PlainTextFormatter">
      <summary>
            Provides the functionality to format the text as a plain text formatting.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.StyleNames">
      <summary>
            Provides styles for the text.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading">
      <summary>
            Style for Header.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading1">
      <summary>
            Style for Header 1.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading2">
      <summary>
            Style for Header 2.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading3">
      <summary>
            Style for Header 3.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading4">
      <summary>
            Style for Header 4.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading5">
      <summary>
            Style for Header 5.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.StyleNames.Heading6">
      <summary>
            Style for Header 6.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableCell">
      <summary>
            Provides a table cell.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCell.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCell" /> class.
            </summary>
      <param name="rowIndex">An index of the row.</param>
      <param name="columnIndex">An index of the column.</param>
      <param name="text">A text of the cell.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCell.#ctor(System.Int32,System.Int32,System.String,GroupDocs.Text.Formatters.TableCellBorders)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCell" /> class.
            </summary>
      <param name="rowIndex">An index of the row.</param>
      <param name="columnIndex">An index of the column.</param>
      <param name="text">A text of the cell.</param>
      <param name="borders">A borders of the cell.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCell.#ctor(System.Int32,System.Int32,System.String,GroupDocs.Text.Formatters.TableCellBorders,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCell" /> class.
            </summary>
      <param name="rowIndex">An index of the row.</param>
      <param name="columnIndex">An index of the column.</param>
      <param name="text">A text of the cell.</param>
      <param name="borders">A borders of the cell.</param>
      <param name="rowSpan">A number of the rows.</param>
      <param name="columnSpan">A number of the columns.</param>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCell.Text">
      <summary>
            Gets a text of the cell.
            </summary>
      <value>A text of the cell.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCell.Borders">
      <summary>
            Gets borders of the cell.
            </summary>
      <value>Borders of the cell.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCell.RowIndex">
      <summary>
            Gets an index of the row.
            </summary>
      <value>An index of the row.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCell.ColumnIndex">
      <summary>
            Gets an index of the column.
            </summary>
      <value>An index of the column.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCell.RowSpan">
      <summary>
            Gets a number of the rows.
            </summary>
      <value>A number of the rows.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCell.ColumnSpan">
      <summary>
            Gets a number of the columns.
            </summary>
      <value>A number of the columns.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableCellBorders">
      <summary>
            Defines the information about cell's borders. 
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.TableCellBorders.Empty">
      <summary>
            Gets an empty instance.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCellBorders.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCellBorders" /> class.
            </summary>
      <param name="hasEdges">A boolean true if cell has borders; otherwise, false.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCellBorders.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCellBorders" /> class.
            </summary>
      <param name="hasLeft">A boolean true if cell has a left border; otherwise, false.</param>
      <param name="hasTop">A boolean true if cell has a top border; otherwise, false.</param>
      <param name="hasRight">A boolean true if cell has a right border; otherwise, false.</param>
      <param name="hasBottom">A boolean true if cell has a bottom border; otherwise, false.</param>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCellBorders.HasLeft">
      <summary>
            Gets a value indicating whether cell has a left border.
            </summary>
      <value>A boolean true if cell has a left border; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCellBorders.HasTop">
      <summary>
            Gets a value indicating whether cell has a top border.
            </summary>
      <value>A boolean true if cell has a top border; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCellBorders.HasRight">
      <summary>
            Gets a value indicating whether cell has a right border.
            </summary>
      <value>A boolean true if cell has a right border; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCellBorders.HasBottom">
      <summary>
            Gets a value indicating whether cell has a bottom border.
            </summary>
      <value>A boolean true if cell has a bottom border; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableCellComparer">
      <summary>
            Provides the comparer for <see cref="T:GroupDocs.Text.Formatters.TableCell" />.
            </summary>
      <remarks>
            Comparer compares only Column Index.
            </remarks>
    </member>
    <member name="F:GroupDocs.Text.Formatters.TableCellComparer.Instance">
      <summary>
            Default instance.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCellComparer.Compare(GroupDocs.Text.Formatters.TableCell,GroupDocs.Text.Formatters.TableCell)">
      <summary>
            Compares two objects and returns a value indicating whether one is less than, 
            equal to, or greater than the other.
            </summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>
        <para>A signed integer that indicates the relative values of x and y, as shown in the following table.</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>x is less than y.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>x equals y.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>x is greater than y.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableCellText">
      <summary>
            Defines the information about cell's text. 
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCellText.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCellText" /> class.
            </summary>
      <param name="text">The text of the cell.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCellText.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableCellText" /> class.
            </summary>
      <param name="sourceLines">The array of the lines.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableCellText.ReadLine">
      <summary>
            Reads a line of characters from the cell and returns the data as a string.
            </summary>
      <returns>The next line from the cell, or null if all characters have been read.</returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableCellText.Count">
      <summary>
            Gets a total count of the lines.
            </summary>
      <value>A total count of the lines.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableColumnWidthCollection">
      <summary>
            Provides the functionality to store the columns' widths.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableColumnWidthCollection.Clear">
      <summary>
            Removes all data.
            </summary>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableColumnWidthCollection.Item(System.Int32)">
      <summary>
            Gets the width of the column with the <paramref name="index" />.
            </summary>
      <param name="index">The index of the column.</param>
      <returns>The width of the column.</returns>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TableRow">
      <summary>
            Provides a table row.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableRow.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TableRow" /> class.
            </summary>
      <param name="rowIndex">An index of the row.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableRow.Add(GroupDocs.Text.Formatters.TableCell)">
      <summary>
            Adds a <paramref name="cell" /> to the row.
            </summary>
      <param name="cell">A cell to add.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableRow.GetCell(System.Int32,System.Int32)">
      <summary>
            Returns a cell by <paramref name="cellRowIndex" /> and <paramref name="cellColumnIndex" />.
            </summary>
      <param name="cellRowIndex">An index of the row.</param>
      <param name="cellColumnIndex">An index of the column.</param>
      <returns>
            An instance of the cell with specified <paramref name="cellRowIndex" />
            and <paramref name="cellColumnIndex" /> or null if cell was not found.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableRow.ContainsCell(System.Int32,System.Int32)">
      <summary>
            Checks if row contains a cell with specified <paramref name="cellRowIndex" />
            and <paramref name="cellColumnIndex" />.
            </summary>
      <param name="cellRowIndex">An index of the row.</param>
      <param name="cellColumnIndex">An index of the column.</param>
      <returns>A boolean if the row contains cell; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TableRow.GetEnumerator">
      <summary> 
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A System.Collections.Generic.IEnumerator`1 that can be used to iterate through
            the collection.
            </returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableRow.RowIndex">
      <summary>
            Gets an index of the row.
            </summary>
      <value>An index of the row.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableRow.Height">
      <summary>
            Gets a height of the row.
            </summary>
      <value>A height of the row.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableRow.Count">
      <summary>
            Gets a count of the cells.
            </summary>
      <value>A count of the cells.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TableRow.Item(System.Int32)">
      <summary>
            Gets the row's cell with the specified index.
            </summary>
      <param name="cellIndex">An index of the cell.</param>
      <returns>A cell associated with the specified index.</returns>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TextItem">
      <summary>
            Provides a text item.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> class.
            </summary>
      <param name="text">A text of the item.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> class.
            </summary>
      <param name="text">A text of the item.</param>
      <param name="hyperlink">A hyperlink.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.#ctor(System.String,GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> class.
            </summary>
      <param name="text">A text of the item.</param>
      <param name="options">A options of the item.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.#ctor(System.String,System.String,GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> class.
            </summary>
      <param name="text">A text of the item.</param>
      <param name="hyperlink">A hyperlink.</param>
      <param name="options">A options of the item.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.AddText(System.String)">
      <summary>
            Adds a text to the item.
            </summary>
      <param name="itemText">A text to add.</param>
      <returns>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> in which a text was added.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.AddText(System.String,System.String)">
      <summary>
            Adds a text to the item.
            </summary>
      <param name="itemText">A text to add.</param>
      <param name="itemHyperlink">A hyperlink.</param>
      <returns>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> in which a text was added.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.AddText(System.String,GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Adds a text to the item.
            </summary>
      <param name="itemText">A text to add.</param>
      <param name="itemOptions">A options of the text.</param>
      <returns>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> in which a text was added.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItem.AddText(System.String,System.String,GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Adds a text to the item.
            </summary>
      <param name="itemText">A text to add.</param>
      <param name="itemHyperlink">A hyperlink.</param>
      <param name="itemOptions">A options of the text.</param>
      <returns>
            An instance of the <see cref="T:GroupDocs.Text.Formatters.TextItem" /> in which a text was added.
            </returns>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItem.Text">
      <summary>
            Gets a text of the item.
            </summary>
      <value>A text of the item.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItem.Hyperlink">
      <summary>
            Gets a hyperlink of the item.
            </summary>
      <value>A hyperlink of the item.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItem.IsHyperlink">
      <summary>
            Gets a value indicating whether the item is hyperlink.
            </summary>
      <value>A boolean true if the item is hyperlink; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItem.NextItem">
      <summary>
            Gets a next item.
            </summary>
      <value>A next item in the sequence; null if is the last item of the sequence.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItem.IsLast">
      <summary>
            Gets a value indicating whether item is the last item of the sequence.
            </summary>
      <value>A boolean if item is the last item of the sequence; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItem.Options">
      <summary>
            Gets a options of the item.
            </summary>
      <value>A options of the item.</value>
    </member>
    <member name="T:GroupDocs.Text.Formatters.TextItemOptions">
      <summary>
            Provides the options for a text item.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.TextItemOptions.Empty">
      <summary>
            Gets an empty instance.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.TextItemOptions.Bold">
      <summary>
            Gets an options for Bold text.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.TextItemOptions.Italic">
      <summary>
            Gets an options for Italic text.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Formatters.TextItemOptions.BoldItalic">
      <summary>
            Gets an options for Bold and Italic text.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TextItemOptions" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Formatters.TextItemOptions" /> class.
            </summary>
      <param name="isBold">A boolean if text is bold; otherwise, false.</param>
      <param name="isItalic">A boolean if text is italic; otherwise, false.</param>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.op_Equality(GroupDocs.Text.Formatters.TextItemOptions,GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Checks if the values of two operands are equal or not, if yes then condition becomes true.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>A boolean true if values are equal; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.op_Inequality(GroupDocs.Text.Formatters.TextItemOptions,GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>A boolean true if values are not equal; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.Equals(GroupDocs.Text.Formatters.TextItemOptions)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Formatters.TextItemOptions.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItemOptions.IsBold">
      <summary>
            Gets a value indicating whether text is bold.
            </summary>
      <value>A boolean if text is bold; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Formatters.TextItemOptions.IsItalic">
      <summary>
            Gets a value indicating whether text is italic.
            </summary>
      <value>A boolean if text is italic; otherwise, false.</value>
    </member>
    <member name="T:GroupDocs.Text.IContainerFactory">
      <summary>
            Provides the functionality for creating containers.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.IContainerFactory.CreateContainer(System.String)">
      <summary>
            Creates a container.
            </summary>
      <param name="fileName">The name of the file.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.IContainerFactory.CreateContainer(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a container.
            </summary>
      <param name="fileName">The name of the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            If <paramref name="loadOptions.MediaType" /> is null, media type will be detected 
            by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.IContainerFactory.CreateContainer(System.IO.Stream)">
      <summary>
            Creates a container.
            </summary>
      <param name="stream">The stream of the document.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.IContainerFactory.CreateContainer(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a container.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
    </member>
    <member name="T:GroupDocs.Text.License">
      <summary>
            Represents GroupDocs.Text license.
            </summary>
      <example>
            This example demonstrates how to setup license.
            <code lang="C#">
                        
            // initialize License class
            License license = new License();
            
            // set path to .lic file
            license.SetLicense(@"C:\\GroupDocs.Text.lic");
            
            </code></example>
    </member>
    <member name="M:GroupDocs.Text.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <param name="filePath">Absolute path to license file.</param>
    </member>
    <member name="M:GroupDocs.Text.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">License stream.</param>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.MediaTypeNames">
      <summary>
            Provides the media types.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Text">
      <summary>
            Provides the media types for texts.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Text.Csv">
      <summary>
            CSV files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Text.TabSeparatedValues">
      <summary>
            Tab separated values files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Text.Html">
      <summary>
            HTML files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Text.Xml">
      <summary>
            XML files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Text.Plain">
      <summary>
            Plain text files.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application">
      <summary>
            Provides the media types for applications.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.Rtf">
      <summary>
            RTF files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.Xhtml">
      <summary>
            XHTML files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.Pdf">
      <summary>
            PDF files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.OneNote">
      <summary>
            ONE files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.Word">
      <summary>
            DOC files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.WordOpenXml">
      <summary>
            DOCX files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.WordMacroEnabled">
      <summary>
            DOCM files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.Excel">
      <summary>
            XLS files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.ExcelOpenXml">
      <summary>
            XLSX files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.ExcelSpreadsheetML">
      <summary>
            SpreadsheetML files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.ExcelBinary">
      <summary>
            XLSB files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.PowerPoint">
      <summary>
            PPT files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.PowerPointSlideShow">
      <summary>
            PPS files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.PowerPointOpenXml">
      <summary>
            PPTX files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.PowerPointOpenXmlSlideShow">
      <summary>
            PPSX files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.OpenDocumentText">
      <summary>
            ODT files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.OpenDocumentSpreadsheet">
      <summary>
            ODS files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.OpenDocumentPresentation">
      <summary>
            ODP files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.OutlookMessage">
      <summary>
            MSG files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.WebArchive">
      <summary>
            MHT/MHTML files.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.PersonalStorageFile">
      <summary>
            Outlook's Personal Storage.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Application.OfflineStorageFolders">
      <summary>
            Outlook's Offline Storage.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Message">
      <summary>
            Provides the media types for messages.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Message.InternetMessageFormat">
      <summary>
            EML/EMLX files.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Multipart">
      <summary>
            Provides the media types for multipart types.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Detectors.MediaType.MediaTypeNames.Multipart.WebArchive">
      <summary>
            MHT/MHTML files.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Containers.ContainerPath">
      <summary>
            Provides the information about the directory in the container.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Containers.ContainerPath.Root">
      <summary>
            An instance of the root directory.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerPath.CreateDirectory(System.String)">
      <summary>
            Creates a sub directory.
            </summary>
      <param name="directoryName">The name of the sub directory.</param>
      <returns>An instance of the <see cref="T:GroupDocs.Text.Containers.ContainerPath" /> for <paramref name="directoryName" />.</returns>
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerPath.ToString">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Containers.ContainerPath.IsRoot">
      <summary>
            Gets a value indicating whether the path is root.
            </summary>
      <value>Value is true if the path is root; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.ContainerPath.Depth">
      <summary>
            Gets a depth of the path.
            </summary>
      <value>An integer that represents a depth of the path.</value>
    </member>
    <member name="P:GroupDocs.Text.Containers.ContainerPath.Item(System.Int32)">
      <summary>
            Gets a part of the part by <paramref name="depth" />.
            </summary>
      <param name="depth">A depth of the path's part.</param>
      <returns>A string that represents the part of the path.</returns>
    </member>
    <member name="T:GroupDocs.Text.Containers.FolderContainer">
      <summary>
            Provides a container for the directory.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.FolderContainer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.FolderContainer" /> class.
            </summary>
      <param name="directory">The directory for reading.</param>
    </member>
    <member name="T:GroupDocs.Text.Containers.PersonalStorageContainer">
      <summary>
            Provides a container for Outlook's Personal Storage.
            </summary>
      <example>
        <para>Enumerate all messages in the file:</para>
        <code lang="c#">
            using (var container = new PersonalStorageContainer(stream))
            {
              for(int i = 0; i&lt;container.Entities.Count; i++)
              {
                Console.WriteLine("Name: " + container.Entities[i].Name);
                Console.WriteLine("Path: " + container.Entities[i].Path.ToString());
                Console.WriteLine("Media type: " + container.Entities[i].MediaType);
                Console.WriteLine("Subject: " + container.Entities[i][PersonalStorageContainer.EmailSubject]);
                Console.WriteLine("" + container.Entities[i][PersonalStorageContainer.EmailSender]);
                Console.WriteLine("" + container.Entities[i][PersonalStorageContainer.EmailReceiver]);
              }
            }   
            </code>
        <para>Read the concrete message:</para>
        <code lang="c#">
            using (var container = new PersonalStorageContainer(stream))
            {
              using (EmailTextExtractor extractor = new EmailTextExtractor(container.Entities[messageIndex].OpenStream())
              {
                Console.WriteLine(extractor.ExtractAll());
              }
            }
            </code>
      </example>
    </member>
    <member name="F:GroupDocs.Text.Containers.PersonalStorageContainer.EmailSubject">
      <summary>
            A key for the subject property.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Containers.PersonalStorageContainer.EmailSender">
      <summary>
            A key for the sender property.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Containers.PersonalStorageContainer.EmailReceiver">
      <summary>
            A key for the receiver property.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Containers.PersonalStorageContainer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.PersonalStorageContainer" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.PersonalStorageContainer.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.PersonalStorageContainer" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.MetadataNames">
      <summary>
            Provides the metadata names.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.FileName">
      <summary>
            The key for FileName.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Url">
      <summary>
            The key for Url.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.MediaType">
      <summary>
            The key for the content's media type.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Encoding">
      <summary>
            The key for the content's encoding.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Application">
      <summary>
            The key for the name of the application field.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.ApplicationVersion">
      <summary>
            The key for the version of the application field.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Template">
      <summary>
            The key of the document's template.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Title">
      <summary>
            The key of the document's title.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Subject">
      <summary>
            The key of the document's subject.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Comments">
      <summary>
            The key of the document's comments.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Keywords">
      <summary>
            The key of the document's keywords.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.ContentStatus">
      <summary>
            The key of the document's content status.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Category">
      <summary>
            The key of the document's category.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Manager">
      <summary>
            The key of the document's manager.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Author">
      <summary>
            The key of the document's creator.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.LastAuthor">
      <summary>
            The key of the last document's author.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.Company">
      <summary>
            The key of the document's name of the company.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.HyperlinkBase">
      <summary>
            The key of the document's hyperlink base.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.CreatedTime">
      <summary>
            The key of the document's created time.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.LastSavedTime">
      <summary>
            The key of the document's last saved time.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.LastPrintedTime">
      <summary>
            The key of the document's last printed time.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.RevisionNumber">
      <summary>
            The key for the document's number of revision.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.TotalEditingTime">
      <summary>
            The key for the document's total editing time.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.EmailFrom">
      <summary>
            The key for email's From field.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.EmailTo">
      <summary>
            The key for email's To field.
            </summary>
    </member>
    <member name="F:GroupDocs.Text.Extractors.Metadata.MetadataNames.EmailCC">
      <summary>
            The key for email's CC field.
            </summary>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection">
      <summary>
            Provides the metadata for a document.
            </summary>
      <example>
        <para>Setting the value to the metadata:</para>
        <code lang="c#">
            metadataCollection["CONTENT_TYPE"] = "application/word";
            </code>
        <para>Getting the value from the metadata:</para>
        <code lang="c#">
            string author = metadataCollection["author"];
            </code>
        <para>Getting all metadata's keys:</para>
        <code lang="c#">
            var keys = metadata.Keys;
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataCollection.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection" /> contains the specified key.
            </summary>
      <param name="key">
            The key to locate in the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection" />.
            </param>
      <returns>A boolean true if the metadata contains key; otherwise, false.</returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection" />.
            </summary>
      <returns>A enumerator for the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection" />.</returns>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Metadata.MetadataCollection.IsEmpty">
      <summary>
            Gets a value indicating whether the metadata has data.
            </summary>
      <value>Value is true if metadata has data; otherwise, false.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Metadata.MetadataCollection.Keys">
      <summary>
            Gets a collection containing the keys in the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection" />.
            </summary>
      <value>
            A collection containing the keys in the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataCollection" />.
            </value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Metadata.MetadataCollection.Item(System.String)">
      <summary>
            Gets or sets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get or set.</param>
      <returns>
            The value associated with the specified key. If the specified key is not found, 
            a get operation returns null. A set operation creates a new element with the specified key.
            </returns>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.CellsMetadataExtractor">
      <summary>
            Provides the functionality to extract the metadata from spreadsheets.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.xls</term>
            <description>Microsoft Excel Spreadsheet</description>
          </item>
          <item>
            <term>.xlsx</term>
            <description>Microsoft Office Open XML Workbook</description>
          </item>
          <item>
            <term>.xlsm</term>
            <description>Microsoft Excel 2007 Macro-Enabled Workbook</description>
          </item>
          <item>
            <term>.xlsb</term>
            <description>Microsoft Excel 2007 Binary Workbook</description>
          </item>
          <item>
            <term>.ods</term>
            <description>OpenDocument spreadsheet</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting the metadata:</para>
        <code lang="c#">
            var metadataExtractor = new CellsMetadataExtractor();
            var metadata = metadataExtractor.ExtractMetadata(stream);
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.MetadataExtractor">
      <summary>
            Provides the functionality to extract the metadata.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataExtractor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Metadata.MetadataExtractor" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataExtractor.ExtractMetadata(System.IO.Stream)">
      <summary>
            Extracts the metadata from the <paramref name="stream" />.
            </summary>
      <param name="stream">The stream of the document.</param>
      <returns>A collection of the metadata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataExtractor.ExtractMetadata(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Extracts the metadata from the <paramref name="stream" />.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>A collection of the metadata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataExtractor.ExtractMetadata(System.String)">
      <summary>
            Extracts the metadata from the <paramref name="fileName" />.
            </summary>
      <param name="fileName">The path to the file.</param>
      <returns>A collection of the metadata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataExtractor.ExtractMetadata(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Extracts the metadata from the <paramref name="fileName" />.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>A collection of the metadata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Metadata.MetadataExtractor.ExtractMetadataFromStream(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Extracts the metadata from the <paramref name="stream" />.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>A collection of the metadata.</returns>
      <remarks>This method must be override in the inherited classes.</remarks>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.EmailMetadataExtractor">
      <summary>
            Provides the functionality to extract the metadata from email messages.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.msg</term>
            <description>Microsoft Outlook message</description>
          </item>
          <item>
            <term>.eml</term>
            <description>Email Message</description>
          </item>
          <item>
            <term>.emlx</term>
            <description>Apple's macOS Mail message</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting the metadata:</para>
        <code lang="c#">
            var metadataExtractor = new EmailMetadataExtractor();
            var metadata = metadataExtractor.ExtractMetadata(stream);
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.PdfMetadataExtractor">
      <summary>
            Provides the functionality to extract the metadata from PDF documents.
            </summary>
      <example>
        <para>Extracting the metadata:</para>
        <code lang="c#">
            var metadataExtractor = new PdfMetadataExtractor();
            var metadata = metadataExtractor.ExtractMetadata(stream);
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.SlidesMetadataExtractor">
      <summary>
            Provides the functionality to extract the metadata from presentations.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.ppt</term>
            <description>Microsoft PowerPoint Presentation</description>
          </item>
          <item>
            <term>.pptx</term>
            <description>Microsoft Office Open XML Presentation</description>
          </item>
          <item>
            <term>.pps</term>
            <description>Microsoft PowerPoint Slideshow</description>
          </item>
          <item>
            <term>.ppsx</term>
            <description>Microsoft Office Open XML Auto-Play Presentation</description>
          </item>
          <item>
            <term>.ppsm</term>
            <description>PowerPoint Open XML Macro-Enabled Slideshow</description>
          </item>
          <item>
            <term>.odp</term>
            <description>OpenDocument presentation</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting the metadata:</para>
        <code lang="c#">
            var metadataExtractor = new SlidesMetadataExtractor();
            var metadata = metadataExtractor.ExtractMetadata(stream);
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Metadata.WordsMetadataExtractor">
      <summary>
            Provides the functionality to extract the metadata from text documents.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.doc</term>
            <description>Microsoft Word Text document</description>
          </item>
          <item>
            <term>.docx</term>
            <description>Microsoft Office Open XML Text document</description>
          </item>
          <item>
            <term>.docm</term>
            <description>Microsoft Word 2007 Master document</description>
          </item>
          <item>
            <term>.rtf</term>
            <description>Rich Text Format text file</description>
          </item>
          <item>
            <term>.odt</term>
            <description>OpenDocument text</description>
          </item>
          <item>
            <term>.html (.xhtml, .htm)</term>
            <description>Hypertext Markup Language document</description>
          </item>
          <item>
            <term>.mhtml (.mht)</term>
            <description>Web Archive Single File</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting the metadata:</para>
        <code lang="c#">
            var metadataExtractor = new WordsMetadataExtractor();
            var metadata = metadataExtractor.ExtractMetadata(stream);
            </code>
      </example>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor">
      <summary>
            Provides the formatted text extractor for spreadsheets.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.xls</term>
            <description>Microsoft Excel Spreadsheet</description>
          </item>
          <item>
            <term>.xlsx</term>
            <description>Microsoft Office Open XML Workbook</description>
          </item>
          <item>
            <term>.xlsm</term>
            <description>Microsoft Excel 2007 Macro-Enabled Workbook</description>
          </item>
          <item>
            <term>.xlsb</term>
            <description>Microsoft Excel 2007 Binary Workbook</description>
          </item>
          <item>
            <term>.ods</term>
            <description>OpenDocument spreadsheet</description>
          </item>
          <item>
            <term>.csv</term>
            <description>Comma Separated Values text file</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting a text from a spreadsheet:</para>
        <code lang="c#">
            CellsFormattedTextExtractor extractor = new CellsFormattedTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting by sheets:</para>
        <code lang="c#">
            CellsFormattedTextExtractor extractor = new CellsFormattedTextExtractor(stream);
            Console.WriteLine(extractor.ExtractSheet(sheetIndex));
            </code>
        <para>Extracting the information about the sheet:</para>
        <code lang="c#">
            CellsFormattedTextExtractor extractor = new CellsFormattedTextExtractor(stream);
            CellsSheetInfo sheetInfo = extractor.GetSheetInfo(sheetIndex);
            Console.WriteLine("Name: {0}", sheetInfo.Name);
            Console.WriteLine("Index: {0}", sheetInfo.Index);
            Console.WriteLine("Rows Count: {0}", sheetInfo.RowCount);
            Console.WriteLine("Columns");
            for(int i = 0; i&lt;sheetInfo.Columns.Count; i++)
            {
              Console.WriteLine("{0}{1}", sheetInfo.Columns[i], i + 1 &lt; sheetInfo.Columns.Count? ";" : "");
            }
            </code>
        <para>Extracting by rows:</para>
        <code lang="c#">
            CellsFormattedTextExtractor extractor = new CellsFormattedTextExtractor(stream);
            CellsSheetInfo sheetInfo = extractor.GetSheetInfo(sheetIndex);
            Console.WriteLine(sheetInfo.ExtractRow(rowIndex));
            </code>
        <para>Extracting only selected columns:</para>
        <code lang="c#">
            CellsFormattedTextExtractor extractor = new CellsFormattedTextExtractor(stream);
            CellsSheetInfo sheetInfo = extractor.GetSheetInfo(sheetIndex);
            </code>
        <code lang="c#">
            Console.WriteLine(sheetInfo.ExtractRow(rowIndex, "A1", "C1")); // a row  with only A1 and C1 columns
            Console.WriteLine(sheetInfo.ExtractSheet("A1", "C1")); // an entire sheet with only A1 and C1 columns
            </code>
        <para>
            For setting a formatter <see cref="P:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor.DocumentFormatter" /> property is used.
            </para>
        <code lang="c#">
            CellsFormattedTextExtractor extractor = new CellsFormattedTextExtractor(stream);
            extractor.DocumentFormatter = new MarkdownDocumentFormatter();
            </code>
        <para>
            By default a text is formatted as a plain text by <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" />.
            </para>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.CellsFormattedTextExtractor.DocumentFormatter">
      <summary>
            Gets or sets a <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.</value>
      <remarks>
            By default the value is an instance of <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> class. You can
            set any other formatter or null, if you want to use default formatter.
            </remarks>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor">
      <summary>
            Provides the formatted text extractor for email messages.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.msg</term>
            <description>Microsoft Outlook message</description>
          </item>
          <item>
            <term>.eml</term>
            <description>Email Message</description>
          </item>
          <item>
            <term>.emlx</term>
            <description>Apple's macOS Mail message</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting an email:</para>
        <code lang="c#">
            EmailFormattedTextExtractor extractor = new EmailFormattedTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll()); // extracts a body of the message
            for(int i = 0; i&lt;extractor.AttachmentCount; i++)
            {
              Console.WriteLine(extractor.GetContentType(i)); // reads a content type of the attachment
              TextExtractor attachmentExtractor = extractorFactory.CreateTextExtractor(extractor.GetContentStream(i));
              try
              {
                if(attachmentExtractor != null)
                {
                  Console.WriteLine(attachmentExtractor.ExtractAll()); // extracts a content of the attachment
                }
              }
              finally
              {
                if(attachmentExtractor != null)
                {
                  attachmentExtractor.Dispose();
                }
              }
            }
            </code>
        <para>
            For setting a formatter <see cref="P:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor.DocumentFormatter" /> property is used.
            </para>
        <code lang="c#">
            EmailFormattedTextExtractor extractor = new EmailFormattedTextExtractor(stream);
            extractor.DocumentFormatter = new MarkdownDocumentFormatter();
            </code>
        <para>
            By default a text is formatted as a plain text by <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" />.
            </para>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.EmailFormattedTextExtractor.DocumentFormatter">
      <summary>
            Gets or sets a <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.</value>
      <remarks>
            By default the value is an instance of <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> class. You can
            set any other formatter or null, if you want to use default formatter.
            </remarks>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.EmailTextExtractor">
      <summary>
            Provides the text extractor for email messages.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.msg</term>
            <description>Microsoft Outlook message</description>
          </item>
          <item>
            <term>.eml</term>
            <description>Email Message</description>
          </item>
          <item>
            <term>.emlx</term>
            <description>Apple's macOS Mail message</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting an email:</para>
        <code lang="c#">
            EmailTextExtractor extractor = new EmailTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll()); // extracts a body of the message
            for(int i = 0; i&lt;extractor.AttachmentCount; i++)
            {
              Console.WriteLine(extractor.GetContentType(i)); // reads a content type of the attachment
              TextExtractor attachmentExtractor = extractorFactory.CreateTextExtractor(extractor.GetContentStream(i));
              try
              {
                if(attachmentExtractor != null)
                {
                  Console.WriteLine(attachmentExtractor.ExtractAll()); // extracts a content of the attachment
                }
              }
              finally
              {
                if(attachmentExtractor != null)
                {
                  attachmentExtractor.Dispose();
                }
              }
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.EmailTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.EmailTextExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.NoteTextExtractor">
      <summary>
            Provides the text extractor for OneNote documents.
            </summary>
      <example>
        <para>Extracting a text from OneNote section:</para>
        <code lang="c#">
            NoteTextExtractor extractor = new NoteTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting text by pages:</para>
        <code lang="c#">
            NoteTextExtractor extractor = new NoteTextExtractor(stream);
            for(int pageIndex = 0; i&lt;extractor.PageCount; pageIndex++)
            {
              Console.WriteLine(extractor.ExtractPage(pageIndex));
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.NoteTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.NoteTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.NoteTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.NoteTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.Reset">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.NoteTextExtractor.ExtractPage(System.Int32)">
      <summary>
            Reads all characters from the page with <paramref name="pageIndex" /> and returns the data as a string.
            </summary>
      <param name="pageIndex">The index of the page.</param>
      <returns>
            A string that contains all characters from the page, or null if all characters have been read.
            </returns>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.NoteTextExtractor.PageCount">
      <summary>
            Gets a total count of the pages.
            </summary>
      <value>A total count of the pages.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.PdfTextExtractor">
      <summary>
            Provides the text extractor for PDF documents.
            </summary>
      <remarks>
            By default the fast text extraction mode is used. If you have trouble with the accuracy of text extraction,
            turn off it by setting <see cref="P:GroupDocs.Text.Extractors.Text.PdfTextExtractor.IsRawMode" /> property to <c>false</c>.
            </remarks>
      <example>
        <para>Extracting a text from PDF:</para>
        <code lang="c#">
            PdfTextExtractor extractor = new PdfTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting by pages:</para>
        <code lang="c#">
            PdfTextExtractor extractor = new PdfTextExtractor(stream);
            for(int pageIndex = 0; i&lt;extractor.PageCount; pageIndex++)
            {
              Console.WriteLine(extractor.ExtractPage(pageIndex));
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.PdfTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.PdfTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.PdfTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.PdfTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.ExtractPage(System.Int32)">
      <summary>
            Reads all characters from the page with <paramref name="pageIndex" /> and returns the data as a string.
            </summary>
      <param name="pageIndex">The index of the page.</param>
      <returns>
            A string that contains all characters from the page, or null if all characters have been read.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.PdfTextExtractor.Reset">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.PdfTextExtractor.IsRawMode">
      <summary>
            Gets or sets a value indicating whether the reader extracts a text without any formatting.
            </summary>
      <remarks>
            This mode is designed for the fast text extraction. The text in this mode is extracted in not very accurate
            way but faster than in the standard mode.
            </remarks>
      <value>A value is false if the reader extracts a text without any formatting; otherwise, true.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.PdfTextExtractor.ExtractMode">
      <summary>
            Gets or sets a value indicating the mode of text extraction.
            </summary>
      <value>The mode of text extraction.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.PdfTextExtractor.PageCount">
      <summary>
            Gets a total count of the pages.
            </summary>
      <value>A total count of the pages.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor">
      <summary>
            Provides the formatted text extractor for presentations.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.ppt</term>
            <description>Microsoft PowerPoint Presentation</description>
          </item>
          <item>
            <term>.pptx</term>
            <description>Microsoft Office Open XML Presentation</description>
          </item>
          <item>
            <term>.pps</term>
            <description>Microsoft PowerPoint Slideshow</description>
          </item>
          <item>
            <term>.ppsx</term>
            <description>Microsoft Office Open XML Auto-Play Presentation</description>
          </item>
          <item>
            <term>.ppsm</term>
            <description>PowerPoint Open XML Macro-Enabled Slideshow</description>
          </item>
          <item>
            <term>.odp</term>
            <description>OpenDocument presentation</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting a text from a presentation:</para>
        <code lang="c#">
            SlidesFormattedTextExtractor extractor = new SlidesFormattedTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting text by slides:</para>
        <code lang="c#">
            SlidesFormattedTextExtractor extractor = new SlidesFormattedTextExtractor(stream);
            for(int slideIndex = 0; i&lt;extractor.SlideCount; slideIndex++)
            {
              Console.WriteLine(extractor.ExtractSlide(slideIndex));
            }
            </code>
        <para>
            For setting a formatter <see cref="P:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor.DocumentFormatter" /> property is used.
            </para>
        <code lang="c#">
            SlidesFormattedTextExtractor extractor = new SlidesFormattedTextExtractor(stream);
            extractor.DocumentFormatter = new MarkdownDocumentFormatter();
            </code>
        <para>
            By default a text is formatted as a plain text by <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" />.
            </para>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance
            of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance
            of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.SlidesFormattedTextExtractor.DocumentFormatter">
      <summary>
            Gets or sets a <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.</value>
      <remarks>
            By default the value is an instance of <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> class. You can
            set any other formatter or null, if you want to use default formatter.
            </remarks>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractor">
      <summary>
            Provides the text extractor for presentations.
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.ppt</term>
            <description>Microsoft PowerPoint Presentation</description>
          </item>
          <item>
            <term>.pptx</term>
            <description>Microsoft Office Open XML Presentation</description>
          </item>
          <item>
            <term>.pps</term>
            <description>Microsoft PowerPoint Slideshow</description>
          </item>
          <item>
            <term>.ppsx</term>
            <description>Microsoft Office Open XML Auto-Play Presentation</description>
          </item>
          <item>
            <term>.ppsm</term>
            <description>PowerPoint Open XML Macro-Enabled Slideshow</description>
          </item>
          <item>
            <term>.odp</term>
            <description>OpenDocument presentation</description>
          </item>
        </list>
        <para>
            By default the fast text extraction mode is used. If you have trouble with the accuracy of text extraction,
            turn off it by setting <see cref="P:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.IsRawMode" /> property to <c>false</c>.
            </para>
      </remarks>
      <example>
        <para>Extracting a text from a presentation:</para>
        <code lang="c#">
            SlidesTextExtractor extractor = new SlidesTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting text by slides:</para>
        <code lang="c#">
            SlidesTextExtractor extractor = new SlidesTextExtractor(stream);
            for(int slideIndex = 0; i&lt;extractor.SlideCount; slideIndex++)
            {
              Console.WriteLine(extractor.ExtractSlide(slideIndex));
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.SlidesTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.IsRawMode">
      <summary>
            Gets or sets a value indicating whether the reader extracts a text without any formatting.
            </summary>
      <remarks>
            This mode is designed for the fast text extraction. The text in this mode is extracted in not very accurate
            way but faster than in the standard mode. If the fast text extraction doesn't support the document format,
            then this parameter is ignored and the standard text extraction is used.
            </remarks>
      <value>A value is false if the reader extracts a text without any formatting; otherwise, true.</value>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.SlidesTextExtractor.ExtractMode">
      <summary>
            Gets or sets a value indicating the mode of text extraction.
            </summary>
      <value>The mode of text extraction.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor">
      <summary>
            Provides the formatted text extractor for text documents. 
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.doc</term>
            <description>Microsoft Word Text document</description>
          </item>
          <item>
            <term>.docx</term>
            <description>Microsoft Office Open XML Text document</description>
          </item>
          <item>
            <term>.docm</term>
            <description>Microsoft Word 2007 Master document</description>
          </item>
          <item>
            <term>.rtf</term>
            <description>Rich Text Format text file</description>
          </item>
          <item>
            <term>.odt</term>
            <description>OpenDocument text</description>
          </item>
          <item>
            <term>.html (.xhtml, .htm)</term>
            <description>Hypertext Markup Language document</description>
          </item>
          <item>
            <term>.mhtml (.mht)</term>
            <description>Web Archive Single File</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting text from document:</para>
        <code lang="c#">
            WordsFormattedTextExtractor extractor = new WordsFormattedTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
        <para>Extracting by pages:</para>
        <code lang="c#">
            WordsFormattedTextExtractor extractor = new WordsFormattedTextExtractor(stream);
            for(int pageIndex = 0; i&lt;extractor.PageCount; pageIndex++)
            {
              Console.WriteLine(extractor.ExtractPage(pageIndex));
            }
            </code>
        <para>
            For setting a formatter <see cref="P:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.DocumentFormatter" /> property is used.
            </para>
        <code lang="c#">
            WordsFormattedTextExtractor extractor = new WordsFormattedTextExtractor(stream);
            extractor.DocumentFormatter = new MarkdownDocumentFormatter();
            </code>
        <para>
            By default a text is formatted as a plain text by <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" />.
            </para>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.ExtractPage(System.Int32)">
      <summary>
            Extracts all characters from the page with <paramref name="pageIndex" /> and returns the data as a string.
            </summary>
      <param name="pageIndex">The index of the page.</param>
      <returns>
            A string that contains all characters from the page, or null if all characters have been extracted.
            </returns>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.Reset">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.DocumentFormatter">
      <summary>
            Gets or sets a <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.</value>
      <remarks>
            By default the value is an instance of <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> class. You can
            set any other formatter or null, if you want to use default formatter.
            </remarks>
    </member>
    <member name="P:GroupDocs.Text.Extractors.Text.WordsFormattedTextExtractor.PageCount">
      <summary>
            Gets a total count of the pages.
            </summary>
      <value>A total count of the pages.</value>
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.WordsTextExtractor">
      <summary>
            Provides the text extractor for text documents. 
            </summary>
      <remarks>
        <para>Supported formats:</para>
        <list type="table">
          <item>
            <term>.doc</term>
            <description>Microsoft Word Text document</description>
          </item>
          <item>
            <term>.docx</term>
            <description>Microsoft Office Open XML Text document</description>
          </item>
          <item>
            <term>.docm</term>
            <description>Microsoft Word 2007 Master document</description>
          </item>
          <item>
            <term>.rtf</term>
            <description>Rich Text Format text file</description>
          </item>
          <item>
            <term>.odt</term>
            <description>OpenDocument text</description>
          </item>
          <item>
            <term>.txt</term>
            <description>Plain text</description>
          </item>
          <item>
            <term>.html (.xhtml, .htm)</term>
            <description>Hypertext Markup Language document</description>
          </item>
          <item>
            <term>.mhtml (.mht)</term>
            <description>Web Archive Single File</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Extracting a text from a text document:</para>
        <code lang="c#">
            WordsTextExtractor extractor = new WordsTextExtractor(stream);
            Console.WriteLine(extractor.ExtractAll());
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.WordsTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsTextExtractor.ExtractHighlights(GroupDocs.Text.Extractors.HighlightOptions[])">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.WordsTextExtractor.Reset">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Extractors.Text.XmlTextExtractor">
      <summary>
            Provides the text reader for XML documents.
            </summary>
      <example>
        <para>Reading a text from XML file:</para>
        <code lang="c#">
            XmlTextReader reader = new XmlTextReader(stream);
            Console.WriteLine(reader.ReadToEnd());
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.XmlTextExtractor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.XmlTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.XmlTextExtractor.#ctor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.XmlTextExtractor" /> class.
            </summary>
      <param name="fileName">The path to the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.XmlTextExtractor.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.XmlTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.XmlTextExtractor.#ctor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Extractors.Text.XmlTextExtractor" /> class.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
    </member>
    <member name="M:GroupDocs.Text.Extractors.Text.XmlTextExtractor.Reset">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.Containers.ContainerEnumerator">
      <summary>
            Provides an enumerator for the containers.
            </summary>
      <example>
        <para>Read all supported documents from container:</para>
        <code land="c#">
            var enumerator = new ContainerEnumerator(containerFactory, containerMediaTypeDetector, container)
            while(enumerator.MoveNext())
            {
              using(var stream = enumerator.Current.OpenStream())
              {
                using(var extractor = readerFactory.CreateTextExtractor(stream))
                {
                  Console.WriteLine(extractor == null ? "document isn't supported" : extractor.ExtractAll());
                }
              }
            }
            </code>
        <para>In this sample:</para>
        <list type="bullet">
          <item>
            <term>containerFactory</term>
            <description>a factory to create the container for sub-containers</description>
          </item>
          <item>
            <term>containerMediaTypeDetector</term>
            <description>a detector to detect media type of the supported sub-containers</description>
          </item>
          <item>
            <term>container</term>
            <description>an initial container</description>
          </item>
        </list>
      </example>
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerEnumerator.#ctor(GroupDocs.Text.IContainerFactory,GroupDocs.Text.Detectors.MediaType.MediaTypeDetector,GroupDocs.Text.Containers.Container,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.Containers.ContainerEnumerator" /> class.
            </summary>
      <param name="containerFactory">A factory for container.</param>
      <param name="containerMediaTypeDetector">A detector for container's media types.</param>
      <param name="container">A container reader.</param>
      <param name="detectContainerByContent">
            Indicates whether to detect container only by file name (not content).
            </param>
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerEnumerator.#ctor(GroupDocs.Text.IContainerFactory,GroupDocs.Text.Detectors.MediaType.MediaTypeDetector,GroupDocs.Text.Containers.Container)">
      <summary>
            Initializes a new instance 
            of the <see cref="T:GroupDocs.Text.Containers.ContainerEnumerator" /> class.
            </summary>
      <param name="containerFactory">A factory for container readers.</param>
      <param name="containerMediaTypeDetector">A detector for container's media types.</param>
      <param name="container">A container reader.</param>
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerEnumerator.Dispose">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerEnumerator.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:GroupDocs.Text.Containers.ContainerEnumerator.Reset">
      <inheritdoc />
    </member>
    <member name="P:GroupDocs.Text.Containers.ContainerEnumerator.Current">
      <inheritdoc />
    </member>
    <member name="T:GroupDocs.Text.ExtractorFactory">
      <summary>
            Provides the functionality for creating extractors for documents.
            </summary>
      <remarks>
        <para>
          <c>ExtractorFactory</c> provides the functionality to create instances of extractors classes.
            It contains the following methods:
            </para>
        <list type="table">
          <item>
            <term>CreateTextExtractor</term>
            <description>
            Creates a text extractor for the file.
            If the document format is not detected, the method returns <strong>null</strong>.
            </description>
          </item>
          <item>
            <term>CreateFormattedTextExtractor</term>
            <description>
            Creates a formatted text extractor for the file.
            If the document format is not detected, the method returns <strong>null</strong>.
            </description>
          </item>
          <item>
            <term>CreateContainer</term>
            <description>
            Creates a container object for the file.
            If the document format is not detected, the method returns <strong>null</strong>.
            </description>
          </item>
          <item>
            <term>ExtractMetadata</term>
            <description>
            Extracts the metadata from the document. 
            If the document format is not detected, the method returns <strong>null</strong>.
            </description>
          </item>
        </list>
        <para>
            For detecting the document format <see cref="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector" /> is used. 
            By default all the supported document formats are detected. You can change this behavior by passing a custom 
            <see cref="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector" /> instance to the factory constructor.
            </para>
        <para>
            For formatted text extractors a <see cref="T:GroupDocs.Text.Formatters.Plain.PlainDocumentFormatter" /> is used.
            You can change a formatter by passing an instance of a formatter to the factory constructor.
            </para>
      </remarks>
      <example>
        <para>Creating a text extractor:</para>
        <code lang="c#">
            ExtractorFactory factory = new ExtractorFactory();
            TextExtractor extractor = factory.CreateTextExtractor(fileName);
            Console.WriteLine(extractor != null ? extractor.ExtractAll() : "The document format is not supported");
            </code>
        <para>Creating a formatted text extractor:</para>
        <code lang="c#">
            ExtractorFactory factory = new ExtractorFactory();
            TextExtractor extractor = factory.CreateFormattedTextExtractor(fileName);
            Console.WriteLine(extractor != null ? extractor.ExtractAll() : "The document format is not supported");
            </code>
        <para>Creating a formatted text extractor with Markdown formatter:</para>
        <code lang="c#">
            ExtractorFactory factory = new ExtractorFactory(new MarkdownDocumentFormatter());
            TextExtractor extractor = factory.CreateFormattedTextExtractor(fileName);
            Console.WriteLine(extractor != null ? extractor.ExtractAll() : "The document format is not supported");
            </code>
        <para>Creating a text extractor only for spreadsheets:</para>
        <code lang="c#">
            ExtractorFactory factory = new ExtractorFactory(null, new CellsMediaTypeDetector());
            TextExtractor extractor = factory.CreateFormattedTextExtractor(fileName);
            Console.WriteLine(extractor != null ? extractor.ExtractAll() : "The document format is not supported");
            </code>
        <para>Creating a container:</para>
        <code lang="c#">
            ExtractorFactory factory = new ExtractorFactory(null, new CellsMediaTypeDetector());
            Container container = factory.CreateContainer(fileName);
            if (container == null)
            {
              Console.WriteLine("The document format is not supported");
            }
            </code>
        <para>Extracting metadata:</para>
        <code lang="c#">
            ExtractorFactory factory = new ExtractorFactory(null, new CellsMediaTypeDetector());
            MetadataCollection metadata = factory.ExtractMetadata(fileName);
            if (metadata == null)
            {
              Console.WriteLine("The document format is not supported");
            }
            </code>
      </example>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.ExtractorFactory" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.#ctor(GroupDocs.Text.Formatters.DocumentFormatter)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.ExtractorFactory" /> class.
            </summary>
      <param name="documentFormatter">
            An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </param>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.#ctor(GroupDocs.Text.Formatters.DocumentFormatter,GroupDocs.Text.Detectors.MediaType.MediaTypeDetector)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.ExtractorFactory" /> class.
            </summary>
      <param name="documentFormatter">
            An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </param>
      <param name="mediaTypeDetector">
            An instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector" />.
            </param>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.#ctor(GroupDocs.Text.Formatters.DocumentFormatter,GroupDocs.Text.Detectors.MediaType.MediaTypeDetector,GroupDocs.Text.Detectors.Encoding.EncodingDetector)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.ExtractorFactory" /> class.
            </summary>
      <param name="documentFormatter">
            An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </param>
      <param name="mediaTypeDetector">
            An instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector" />.
            </param>
      <param name="encodingDetector">
            An instance of the <see cref="T:GroupDocs.Text.Detectors.Encoding.EncodingDetector" />.
            </param>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.#ctor(GroupDocs.Text.Formatters.DocumentFormatter,GroupDocs.Text.Detectors.MediaType.MediaTypeDetector,GroupDocs.Text.Detectors.Encoding.EncodingDetector,GroupDocs.Text.INotificationReceiver)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Text.ExtractorFactory" /> class.
            </summary>
      <param name="documentFormatter">
            An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.
            </param>
      <param name="mediaTypeDetector">
            An instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector" />.
            </param>
      <param name="encodingDetector">
            An instance of the <see cref="T:GroupDocs.Text.Detectors.Encoding.EncodingDetector" />.
            </param>
      <param name="notificationReceiver">
        <see cref="T:GroupDocs.Text.INotificationReceiver" /> to process messages.
            </param>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateTextExtractor(System.String)">
      <summary>
            Creates a text extractor.
            </summary>
      <param name="fileName">The name of the file.</param>
      <returns>An instance of the text extractor or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateTextExtractor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a text extractor.
            </summary>
      <param name="fileName">The name of the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the text extractor or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected 
            by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateTextExtractor(System.IO.Stream)">
      <summary>
            Creates a text extractor.
            </summary>
      <param name="stream">The stream of the document.</param>
      <returns>An instance of the text extractor or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateTextExtractor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a text extractor.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the text extractor or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateFormattedTextExtractor(System.String)">
      <summary>
            Creates a formatted text extractor.
            </summary>
      <param name="fileName">The name of the file.</param>
      <returns>An instance of the formatted text extractor or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateFormattedTextExtractor(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a formatted text extractor.
            </summary>
      <param name="fileName">The name of the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the formatted text extractor or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected 
            by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateFormattedTextExtractor(System.IO.Stream)">
      <summary>
            Creates a formatted text extractor.
            </summary>
      <param name="stream">The stream of the document.</param>
      <returns>An instance of the formatted text extractor or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateFormattedTextExtractor(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a formatted text extractor.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the formatted text extractor or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.ExtractMetadata(System.String)">
      <summary>
            Extracts the metadata.
            </summary>
      <param name="fileName">The name of the file.</param>
      <returns>A collection of the metadata or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.ExtractMetadata(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Extracts the metadata.
            </summary>
      <param name="fileName">The name of the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>A collection of the metadata or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected 
            by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.ExtractMetadata(System.IO.Stream)">
      <summary>
            Extracts the metadata.
            </summary>
      <param name="stream">The stream of the document.</param>
      <returns>A collection of the metadata or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.ExtractMetadata(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Extracts the metadata.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>A collection of the metadata or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateContainer(System.String)">
      <summary>
            Creates a container.
            </summary>
      <param name="fileName">The name of the file.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateContainer(System.String,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a container.
            </summary>
      <param name="fileName">The name of the file.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected 
            by the extension of the file or by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateContainer(System.IO.Stream)">
      <summary>
            Creates a container.
            </summary>
      <param name="stream">The stream of the document.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            The media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.CreateContainer(System.IO.Stream,GroupDocs.Text.LoadOptions)">
      <summary>
            Creates a container.
            </summary>
      <param name="stream">The stream of the document.</param>
      <param name="loadOptions">The options of loading the file.</param>
      <returns>An instance of the container or null if media type is not supported.</returns>
      <remarks>
            If <c>loadOptions.MediaType</c> is null, media type will be detected by the content of the file.
            </remarks>
    </member>
    <member name="M:GroupDocs.Text.ExtractorFactory.SendNotificationMessage(GroupDocs.Text.INotificationReceiver,GroupDocs.Text.NotificationMessage)">
      <summary>
            Sends notification message to <paramref name="receiver" /> and factory receiver (if presented).
            </summary>
      <param name="receiver">The notification receiver.</param>
      <param name="message">The message with a notification.</param>
    </member>
    <member name="P:GroupDocs.Text.ExtractorFactory.DocumentFormatter">
      <summary>
            Gets a document formatter.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Formatters.DocumentFormatter" />.</value>
    </member>
    <member name="P:GroupDocs.Text.ExtractorFactory.MediaTypeDetector">
      <summary>
            Gets a media type detector.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Detectors.MediaType.MediaTypeDetector" />.</value>
    </member>
    <member name="P:GroupDocs.Text.ExtractorFactory.EncodingDetector">
      <summary>
            Gets an encoding detector.
            </summary>
      <value>An instance of the <see cref="T:GroupDocs.Text.Detectors.Encoding.EncodingDetector" />.</value>
    </member>
    <member name="T:GroupDocs.Text.UnsupportedDocumentFormatException">
      <summary>
            Thrown during document load, when the document format is not recognized or not supported.
            </summary>
    </member>
  </members>
</doc>