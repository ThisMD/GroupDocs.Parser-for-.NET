<?xml version="1.0"?>
<doc>
<assembly>
<name>
GroupDocs.Text.Examples.CSharp
</name>
</assembly>
<members>
<member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.OneNoteDocument.ExtractOneNoteDocument(System.String)">
	<summary>
 Extract text from onenote file/document
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.PdfDocument.ExtractPdfDocument(System.String)">
	<summary>
 Extract text from pdf documents
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.PresentationDocument.ExtractPresentationDocument(System.String)">
	<summary>
 Extract text from presentatoin documents
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.SpreadsheetDocument.ExtractEntireSheet(System.String)">
	<summary>
 Extract text from spreadsheet documents
 </summary>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.SpreadsheetDocument.ExtractSheetByRows(System.String)">
	<summary>
 Extracting the sheet by the rows
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.SpreadsheetDocument.ExtractSelectedColumns(System.String)">
	<summary>
 Extracting the selected columns
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.SpreadsheetDocument.ExtractSelectedColumnsAndRows(System.String)">
	<summary>
 Extracting the selected columns from selected rows
 </summary>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.SpreadsheetDocument.ConcreteExtractor(System.String)">
	<summary>
 Create the concrete extractor by hand
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.TextDocument.ExtractEntireWordPage(System.String)">
	<summary>
 Extract formatted text from word
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.TextDocument.FormattingTable(System.String)">
	<summary>
 Extract text from word by defining a table format
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.TextDocument.ExtractingWithMarkdown(System.String)">
	<summary>
 Extract text with markdown text format
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.DocumentTextExtractor.TextDocument.HtmlTextFormating(System.String)">
	<summary>
 Extract a text with HTML text formatter
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.ContainerExtractor.ExtractFromOstContainer">
	<summary>
 Extract from OST container
 </summary>
</member><member name="M:GroupDocs.Text.Examples.CSharp.ContainerExtractor.EnumeratingAllEntities">
	<summary>
 For enumerating all the entities of the group of containers ContainerEnumerator class is used
 </summary>
</member><member name="P:GroupDocs.Text.Examples.CSharp.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:GroupDocs.Text.Examples.CSharp.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:GroupDocs.Text.Examples.CSharp.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:GroupDocs.Text.Examples.CSharp.MetaDataExtractor.CellsMetadata.ExtractMetadataFromCells(System.String)">
	<summary>
 Extract metadata from cells
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.MetaDataExtractor.SlidesMetadata.ExtractMetadataFromSlides(System.String)">
	<summary>
 Extract metadata from slides
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.MetaDataExtractor.WordsMetaData.ExtractMetadataFromWords(System.String)">
	<summary>
 Extract metadata from word documents
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.MetaDataExtractor.PdfMetaData.ExtractMetadataFromPdf(System.String)">
	<summary>
 Extract metadata from pdf documents
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.MetaDataExtractor.EmailMetaData.ExtractMetadataFromEmails(System.String)">
	<summary>
 Extract metadata from emails
 </summary>
	<param name="fileName"></param>
</member><member name="M:GroupDocs.Text.Examples.CSharp.Common.ApplyLicense">
	<summary>
 Apply license
 </summary>
</member>
</members>
</doc>